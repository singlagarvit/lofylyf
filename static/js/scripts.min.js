function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(e) {
        return typeof e
    } : function(e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}! function(e, t) {
    "object" == typeof exports && "undefined" != typeof module ? t(exports, require("jquery")) : "function" == typeof define && define.amd ? define(["exports", "jquery"], t) : t((e = e || self).bootstrap = {}, e.jQuery)
}(this, function(e, m) {
    "use strict";

    function i(e, t) {
        for (var n = 0; n < t.length; n++) {
            var i = t[n];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
        }
    }

    function r(e, t, n) {
        return t && i(e.prototype, t), n && i(e, n), e
    }

    function t(t, e) {
        var n, i = Object.keys(t);
        return Object.getOwnPropertySymbols && (n = Object.getOwnPropertySymbols(t), e && (n = n.filter(function(e) {
            return Object.getOwnPropertyDescriptor(t, e).enumerable
        })), i.push.apply(i, n)), i
    }

    function l(o) {
        for (var e = 1; e < arguments.length; e++) {
            var s = null != arguments[e] ? arguments[e] : {};
            e % 2 ? t(Object(s), !0).forEach(function(e) {
                var t, n, i;
                t = o, i = s[n = e], n in t ? Object.defineProperty(t, n, {
                    value: i,
                    enumerable: !0,
                    configurable: !0,
                    writable: !0
                }) : t[n] = i
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(o, Object.getOwnPropertyDescriptors(s)) : t(Object(s)).forEach(function(e) {
                Object.defineProperty(o, e, Object.getOwnPropertyDescriptor(s, e))
            })
        }
        return o
    }
    m = m && m.hasOwnProperty("default") ? m.default : m;
    var n = "transitionend";

    function o(e) {
        var t = this,
            n = !1;
        return m(this).one(p.TRANSITION_END, function() {
            n = !0
        }), setTimeout(function() {
            n || p.triggerTransitionEnd(t)
        }, e), this
    }
    var p = {
        TRANSITION_END: "bsTransitionEnd",
        getUID: function(e) {
            for (; e += ~~(1e6 * Math.random()), document.getElementById(e););
            return e
        },
        getSelectorFromElement: function(e) {
            var t, n = e.getAttribute("data-target");
            n && "#" !== n || (n = (t = e.getAttribute("href")) && "#" !== t ? t.trim() : "");
            try {
                return document.querySelector(n) ? n : null
            } catch (e) {
                return null
            }
        },
        getTransitionDurationFromElement: function(e) {
            if (!e) return 0;
            var t = m(e).css("transition-duration"),
                n = m(e).css("transition-delay"),
                i = parseFloat(t),
                o = parseFloat(n);
            return i || o ? (t = t.split(",")[0], n = n.split(",")[0], 1e3 * (parseFloat(t) + parseFloat(n))) : 0
        },
        reflow: function(e) {
            return e.offsetHeight
        },
        triggerTransitionEnd: function(e) {
            m(e).trigger(n)
        },
        supportsTransitionEnd: function() {
            return Boolean(n)
        },
        isElement: function(e) {
            return (e[0] || e).nodeType
        },
        typeCheckConfig: function(e, t, n) {
            for (var i in n)
                if (Object.prototype.hasOwnProperty.call(n, i)) {
                    var o = n[i],
                        s = t[i],
                        r = s && p.isElement(s) ? "element" : (a = s, {}.toString.call(a).match(/\s([a-z]+)/i)[1].toLowerCase());
                    if (!new RegExp(o).test(r)) throw new Error(e.toUpperCase() + ': Option "' + i + '" provided type "' + r + '" but expected type "' + o + '".')
                }
            var a
        },
        findShadowRoot: function(e) {
            if (!document.documentElement.attachShadow) return null;
            if ("function" != typeof e.getRootNode) return e instanceof ShadowRoot ? e : e.parentNode ? p.findShadowRoot(e.parentNode) : null;
            var t = e.getRootNode();
            return t instanceof ShadowRoot ? t : null
        },
        jQueryDetection: function() {
            if (void 0 === m) throw new TypeError("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
            var e = m.fn.jquery.split(" ")[0].split(".");
            if (e[0] < 2 && e[1] < 9 || 1 === e[0] && 9 === e[1] && e[2] < 1 || 4 <= e[0]) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0")
        }
    };
    p.jQueryDetection(), m.fn.emulateTransitionEnd = o, m.event.special[p.TRANSITION_END] = {
        bindType: n,
        delegateType: n,
        handle: function(e) {
            if (m(e.target).is(this)) return e.handleObj.handler.apply(this, arguments)
        }
    };
    var s = "alert",
        a = "bs.alert",
        c = "." + a,
        u = m.fn[s],
        d = {
            CLOSE: "close" + c,
            CLOSED: "closed" + c,
            CLICK_DATA_API: "click" + c + ".data-api"
        },
        h = "alert",
        f = "fade",
        g = "show",
        _ = function() {
            function i(e) {
                this._element = e
            }
            var e = i.prototype;
            return e.close = function(e) {
                var t = this._element;
                e && (t = this._getRootElement(e)), this._triggerCloseEvent(t).isDefaultPrevented() || this._removeElement(t)
            }, e.dispose = function() {
                m.removeData(this._element, a), this._element = null
            }, e._getRootElement = function(e) {
                var t = p.getSelectorFromElement(e),
                    n = !1;
                return t && (n = document.querySelector(t)), n = n || m(e).closest("." + h)[0]
            }, e._triggerCloseEvent = function(e) {
                var t = m.Event(d.CLOSE);
                return m(e).trigger(t), t
            }, e._removeElement = function(t) {
                var e, n = this;
                m(t).removeClass(g), m(t).hasClass(f) ? (e = p.getTransitionDurationFromElement(t), m(t).one(p.TRANSITION_END, function(e) {
                    return n._destroyElement(t, e)
                }).emulateTransitionEnd(e)) : this._destroyElement(t)
            }, e._destroyElement = function(e) {
                m(e).detach().trigger(d.CLOSED).remove()
            }, i._jQueryInterface = function(n) {
                return this.each(function() {
                    var e = m(this),
                        t = e.data(a);
                    t || (t = new i(this), e.data(a, t)), "close" === n && t[n](this)
                })
            }, i._handleDismiss = function(t) {
                return function(e) {
                    e && e.preventDefault(), t.close(this)
                }
            }, r(i, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }]), i
        }();
    m(document).on(d.CLICK_DATA_API, '[data-dismiss="alert"]', _._handleDismiss(new _)), m.fn[s] = _._jQueryInterface, m.fn[s].Constructor = _, m.fn[s].noConflict = function() {
        return m.fn[s] = u, _._jQueryInterface
    };
    var v = "button",
        y = "bs.button",
        b = "." + y,
        E = ".data-api",
        w = m.fn[v],
        C = "active",
        T = "btn",
        S = "focus",
        N = '[data-toggle^="button"]',
        D = '[data-toggle="buttons"]',
        I = '[data-toggle="button"]',
        A = '[data-toggle="buttons"] .btn',
        L = 'input:not([type="hidden"])',
        O = ".active",
        k = ".btn",
        j = {
            CLICK_DATA_API: "click" + b + E,
            FOCUS_BLUR_DATA_API: "focus" + b + E + " blur" + b + E,
            LOAD_DATA_API: "load" + b + E
        },
        x = function() {
            function n(e) {
                this._element = e
            }
            var e = n.prototype;
            return e.toggle = function() {
                var e, t, n = !0,
                    i = !0,
                    o = m(this._element).closest(D)[0];
                !o || (e = this._element.querySelector(L)) && ("radio" === e.type ? e.checked && this._element.classList.contains(C) ? n = !1 : (t = o.querySelector(O)) && m(t).removeClass(C) : ("checkbox" !== e.type || "LABEL" === this._element.tagName && e.checked === this._element.classList.contains(C)) && (n = !1), n && (e.checked = !this._element.classList.contains(C), m(e).trigger("change")), e.focus(), i = !1), this._element.hasAttribute("disabled") || this._element.classList.contains("disabled") || (i && this._element.setAttribute("aria-pressed", !this._element.classList.contains(C)), n && m(this._element).toggleClass(C))
            }, e.dispose = function() {
                m.removeData(this._element, y), this._element = null
            }, n._jQueryInterface = function(t) {
                return this.each(function() {
                    var e = m(this).data(y);
                    e || (e = new n(this), m(this).data(y, e)), "toggle" === t && e[t]()
                })
            }, r(n, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }]), n
        }();
    m(document).on(j.CLICK_DATA_API, N, function(e) {
        var t = e.target;
        if (m(t).hasClass(T) || (t = m(t).closest(k)[0]), !t || t.hasAttribute("disabled") || t.classList.contains("disabled")) e.preventDefault();
        else {
            var n = t.querySelector(L);
            if (n && (n.hasAttribute("disabled") || n.classList.contains("disabled"))) return void e.preventDefault();
            x._jQueryInterface.call(m(t), "toggle")
        }
    }).on(j.FOCUS_BLUR_DATA_API, N, function(e) {
        var t = m(e.target).closest(k)[0];
        m(t).toggleClass(S, /^focus(in)?$/.test(e.type))
    }), m(window).on(j.LOAD_DATA_API, function() {
        for (var e = [].slice.call(document.querySelectorAll(A)), t = 0, n = e.length; t < n; t++) {
            var i = e[t],
                o = i.querySelector(L);
            o.checked || o.hasAttribute("checked") ? i.classList.add(C) : i.classList.remove(C)
        }
        for (var s = 0, r = (e = [].slice.call(document.querySelectorAll(I))).length; s < r; s++) {
            var a = e[s];
            "true" === a.getAttribute("aria-pressed") ? a.classList.add(C) : a.classList.remove(C)
        }
    }), m.fn[v] = x._jQueryInterface, m.fn[v].Constructor = x, m.fn[v].noConflict = function() {
        return m.fn[v] = w, x._jQueryInterface
    };
    var P = "carousel",
        B = "bs.carousel",
        H = "." + B,
        M = ".data-api",
        R = m.fn[P],
        F = {
            interval: 5e3,
            keyboard: !0,
            slide: !1,
            pause: "hover",
            wrap: !0,
            touch: !0
        },
        q = {
            interval: "(number|boolean)",
            keyboard: "boolean",
            slide: "(boolean|string)",
            pause: "(string|boolean)",
            wrap: "boolean",
            touch: "boolean"
        },
        W = "next",
        U = "prev",
        K = "left",
        Q = "right",
        V = {
            SLIDE: "slide" + H,
            SLID: "slid" + H,
            KEYDOWN: "keydown" + H,
            MOUSEENTER: "mouseenter" + H,
            MOUSELEAVE: "mouseleave" + H,
            TOUCHSTART: "touchstart" + H,
            TOUCHMOVE: "touchmove" + H,
            TOUCHEND: "touchend" + H,
            POINTERDOWN: "pointerdown" + H,
            POINTERUP: "pointerup" + H,
            DRAG_START: "dragstart" + H,
            LOAD_DATA_API: "load" + H + M,
            CLICK_DATA_API: "click" + H + M
        },
        z = "carousel",
        Y = "active",
        X = "slide",
        G = "carousel-item-right",
        Z = "carousel-item-left",
        $ = "carousel-item-next",
        J = "carousel-item-prev",
        ee = "pointer-event",
        te = ".active",
        ne = ".active.carousel-item",
        ie = ".carousel-item",
        oe = ".carousel-item img",
        se = ".carousel-item-next, .carousel-item-prev",
        re = ".carousel-indicators",
        ae = "[data-slide], [data-slide-to]",
        le = '[data-ride="carousel"]',
        ce = {
            TOUCH: "touch",
            PEN: "pen"
        },
        ue = function() {
            function s(e, t) {
                this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this.touchStartX = 0, this.touchDeltaX = 0, this._config = this._getConfig(t), this._element = e, this._indicatorsElement = this._element.querySelector(re), this._touchSupported = "ontouchstart" in document.documentElement || 0 < navigator.maxTouchPoints, this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent), this._addEventListeners()
            }
            var e = s.prototype;
            return e.next = function() {
                this._isSliding || this._slide(W)
            }, e.nextWhenVisible = function() {
                !document.hidden && m(this._element).is(":visible") && "hidden" !== m(this._element).css("visibility") && this.next()
            }, e.prev = function() {
                this._isSliding || this._slide(U)
            }, e.pause = function(e) {
                e || (this._isPaused = !0), this._element.querySelector(se) && (p.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null
            }, e.cycle = function(e) {
                e || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval))
            }, e.to = function(e) {
                var t = this;
                this._activeElement = this._element.querySelector(ne);
                var n = this._getItemIndex(this._activeElement);
                if (!(e > this._items.length - 1 || e < 0))
                    if (this._isSliding) m(this._element).one(V.SLID, function() {
                        return t.to(e)
                    });
                    else {
                        if (n === e) return this.pause(), void this.cycle();
                        var i = n < e ? W : U;
                        this._slide(i, this._items[e])
                    }
            }, e.dispose = function() {
                m(this._element).off(H), m.removeData(this._element, B), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null
            }, e._getConfig = function(e) {
                return e = l({}, F, {}, e), p.typeCheckConfig(P, e, q), e
            }, e._handleSwipe = function() {
                var e, t = Math.abs(this.touchDeltaX);
                t <= 40 || (e = t / this.touchDeltaX, (this.touchDeltaX = 0) < e && this.prev(), e < 0 && this.next())
            }, e._addEventListeners = function() {
                var t = this;
                this._config.keyboard && m(this._element).on(V.KEYDOWN, function(e) {
                    return t._keydown(e)
                }), "hover" === this._config.pause && m(this._element).on(V.MOUSEENTER, function(e) {
                    return t.pause(e)
                }).on(V.MOUSELEAVE, function(e) {
                    return t.cycle(e)
                }), this._config.touch && this._addTouchEventListeners()
            }, e._addTouchEventListeners = function() {
                var e, t, n = this;
                this._touchSupported && (e = function(e) {
                    n._pointerEvent && ce[e.originalEvent.pointerType.toUpperCase()] ? n.touchStartX = e.originalEvent.clientX : n._pointerEvent || (n.touchStartX = e.originalEvent.touches[0].clientX)
                }, t = function(e) {
                    n._pointerEvent && ce[e.originalEvent.pointerType.toUpperCase()] && (n.touchDeltaX = e.originalEvent.clientX - n.touchStartX), n._handleSwipe(), "hover" === n._config.pause && (n.pause(), n.touchTimeout && clearTimeout(n.touchTimeout), n.touchTimeout = setTimeout(function(e) {
                        return n.cycle(e)
                    }, 500 + n._config.interval))
                }, m(this._element.querySelectorAll(oe)).on(V.DRAG_START, function(e) {
                    return e.preventDefault()
                }), this._pointerEvent ? (m(this._element).on(V.POINTERDOWN, e), m(this._element).on(V.POINTERUP, t), this._element.classList.add(ee)) : (m(this._element).on(V.TOUCHSTART, e), m(this._element).on(V.TOUCHMOVE, function(e) {
                    var t;
                    (t = e).originalEvent.touches && 1 < t.originalEvent.touches.length ? n.touchDeltaX = 0 : n.touchDeltaX = t.originalEvent.touches[0].clientX - n.touchStartX
                }), m(this._element).on(V.TOUCHEND, t)))
            }, e._keydown = function(e) {
                if (!/input|textarea/i.test(e.target.tagName)) switch (e.which) {
                    case 37:
                        e.preventDefault(), this.prev();
                        break;
                    case 39:
                        e.preventDefault(), this.next()
                }
            }, e._getItemIndex = function(e) {
                return this._items = e && e.parentNode ? [].slice.call(e.parentNode.querySelectorAll(ie)) : [], this._items.indexOf(e)
            }, e._getItemByDirection = function(e, t) {
                var n = e === W,
                    i = e === U,
                    o = this._getItemIndex(t),
                    s = this._items.length - 1;
                if ((i && 0 === o || n && o === s) && !this._config.wrap) return t;
                var r = (o + (e === U ? -1 : 1)) % this._items.length;
                return -1 == r ? this._items[this._items.length - 1] : this._items[r]
            }, e._triggerSlideEvent = function(e, t) {
                var n = this._getItemIndex(e),
                    i = this._getItemIndex(this._element.querySelector(ne)),
                    o = m.Event(V.SLIDE, {
                        relatedTarget: e,
                        direction: t,
                        from: i,
                        to: n
                    });
                return m(this._element).trigger(o), o
            }, e._setActiveIndicatorElement = function(e) {
                var t, n;
                this._indicatorsElement && (t = [].slice.call(this._indicatorsElement.querySelectorAll(te)), m(t).removeClass(Y), (n = this._indicatorsElement.children[this._getItemIndex(e)]) && m(n).addClass(Y))
            }, e._slide = function(e, t) {
                var n, i, o, s, r, a = this,
                    l = this._element.querySelector(ne),
                    c = this._getItemIndex(l),
                    u = t || l && this._getItemByDirection(e, l),
                    d = this._getItemIndex(u),
                    h = Boolean(this._interval),
                    f = e === W ? (n = Z, i = $, K) : (n = G, i = J, Q);
                u && m(u).hasClass(Y) ? this._isSliding = !1 : this._triggerSlideEvent(u, f).isDefaultPrevented() || l && u && (this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(u), o = m.Event(V.SLID, {
                    relatedTarget: u,
                    direction: f,
                    from: c,
                    to: d
                }), m(this._element).hasClass(X) ? (m(u).addClass(i), p.reflow(u), m(l).addClass(n), m(u).addClass(n), (s = parseInt(u.getAttribute("data-interval"), 10)) ? (this._config.defaultInterval = this._config.defaultInterval || this._config.interval, this._config.interval = s) : this._config.interval = this._config.defaultInterval || this._config.interval, r = p.getTransitionDurationFromElement(l), m(l).one(p.TRANSITION_END, function() {
                    m(u).removeClass(n + " " + i).addClass(Y), m(l).removeClass(Y + " " + i + " " + n), a._isSliding = !1, setTimeout(function() {
                        return m(a._element).trigger(o)
                    }, 0)
                }).emulateTransitionEnd(r)) : (m(l).removeClass(Y), m(u).addClass(Y), this._isSliding = !1, m(this._element).trigger(o)), h && this.cycle())
            }, s._jQueryInterface = function(i) {
                return this.each(function() {
                    var e = m(this).data(B),
                        t = l({}, F, {}, m(this).data());
                    "object" == typeof i && (t = l({}, t, {}, i));
                    var n = "string" == typeof i ? i : t.slide;
                    if (e || (e = new s(this, t), m(this).data(B, e)), "number" == typeof i) e.to(i);
                    else if ("string" == typeof n) {
                        if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                        e[n]()
                    } else t.interval && t.ride && (e.pause(), e.cycle())
                })
            }, s._dataApiClickHandler = function(e) {
                var t, n, i, o = p.getSelectorFromElement(this);
                !o || (t = m(o)[0]) && m(t).hasClass(z) && (n = l({}, m(t).data(), {}, m(this).data()), (i = this.getAttribute("data-slide-to")) && (n.interval = !1), s._jQueryInterface.call(m(t), n), i && m(t).data(B).to(i), e.preventDefault())
            }, r(s, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return F
                }
            }]), s
        }();
    m(document).on(V.CLICK_DATA_API, ae, ue._dataApiClickHandler), m(window).on(V.LOAD_DATA_API, function() {
        for (var e = [].slice.call(document.querySelectorAll(le)), t = 0, n = e.length; t < n; t++) {
            var i = m(e[t]);
            ue._jQueryInterface.call(i, i.data())
        }
    }), m.fn[P] = ue._jQueryInterface, m.fn[P].Constructor = ue, m.fn[P].noConflict = function() {
        return m.fn[P] = R, ue._jQueryInterface
    };
    var de = "collapse",
        he = "bs.collapse",
        fe = "." + he,
        me = m.fn[de],
        pe = {
            toggle: !0,
            parent: ""
        },
        ge = {
            toggle: "boolean",
            parent: "(string|element)"
        },
        _e = {
            SHOW: "show" + fe,
            SHOWN: "shown" + fe,
            HIDE: "hide" + fe,
            HIDDEN: "hidden" + fe,
            CLICK_DATA_API: "click" + fe + ".data-api"
        },
        ve = "show",
        ye = "collapse",
        be = "collapsing",
        Ee = "collapsed",
        we = "width",
        Ce = "height",
        Te = ".show, .collapsing",
        Se = '[data-toggle="collapse"]',
        Ne = function() {
            function a(t, e) {
                this._isTransitioning = !1, this._element = t, this._config = this._getConfig(e), this._triggerArray = [].slice.call(document.querySelectorAll('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));
                for (var n = [].slice.call(document.querySelectorAll(Se)), i = 0, o = n.length; i < o; i++) {
                    var s = n[i],
                        r = p.getSelectorFromElement(s),
                        a = [].slice.call(document.querySelectorAll(r)).filter(function(e) {
                            return e === t
                        });
                    null !== r && 0 < a.length && (this._selector = r, this._triggerArray.push(s))
                }
                this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle()
            }
            var e = a.prototype;
            return e.toggle = function() {
                m(this._element).hasClass(ve) ? this.hide() : this.show()
            }, e.show = function() {
                var e, t, n, i, o, s, r = this;
                this._isTransitioning || m(this._element).hasClass(ve) || (this._parent && 0 === (e = [].slice.call(this._parent.querySelectorAll(Te)).filter(function(e) {
                    return "string" == typeof r._config.parent ? e.getAttribute("data-parent") === r._config.parent : e.classList.contains(ye)
                })).length && (e = null), e && (t = m(e).not(this._selector).data(he)) && t._isTransitioning || (n = m.Event(_e.SHOW), m(this._element).trigger(n), n.isDefaultPrevented() || (e && (a._jQueryInterface.call(m(e).not(this._selector), "hide"), t || m(e).data(he, null)), i = this._getDimension(), m(this._element).removeClass(ye).addClass(be), this._element.style[i] = 0, this._triggerArray.length && m(this._triggerArray).removeClass(Ee).attr("aria-expanded", !0), this.setTransitioning(!0), o = "scroll" + (i[0].toUpperCase() + i.slice(1)), s = p.getTransitionDurationFromElement(this._element), m(this._element).one(p.TRANSITION_END, function() {
                    m(r._element).removeClass(be).addClass(ye).addClass(ve), r._element.style[i] = "", r.setTransitioning(!1), m(r._element).trigger(_e.SHOWN)
                }).emulateTransitionEnd(s), this._element.style[i] = this._element[o] + "px")))
            }, e.hide = function() {
                var e = this;
                if (!this._isTransitioning && m(this._element).hasClass(ve)) {
                    var t = m.Event(_e.HIDE);
                    if (m(this._element).trigger(t), !t.isDefaultPrevented()) {
                        var n = this._getDimension();
                        this._element.style[n] = this._element.getBoundingClientRect()[n] + "px", p.reflow(this._element), m(this._element).addClass(be).removeClass(ye).removeClass(ve);
                        var i = this._triggerArray.length;
                        if (0 < i)
                            for (var o = 0; o < i; o++) {
                                var s = this._triggerArray[o],
                                    r = p.getSelectorFromElement(s);
                                null !== r && (m([].slice.call(document.querySelectorAll(r))).hasClass(ve) || m(s).addClass(Ee).attr("aria-expanded", !1))
                            }
                        this.setTransitioning(!0);
                        this._element.style[n] = "";
                        var a = p.getTransitionDurationFromElement(this._element);
                        m(this._element).one(p.TRANSITION_END, function() {
                            e.setTransitioning(!1), m(e._element).removeClass(be).addClass(ye).trigger(_e.HIDDEN)
                        }).emulateTransitionEnd(a)
                    }
                }
            }, e.setTransitioning = function(e) {
                this._isTransitioning = e
            }, e.dispose = function() {
                m.removeData(this._element, he), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null
            }, e._getConfig = function(e) {
                return (e = l({}, pe, {}, e)).toggle = Boolean(e.toggle), p.typeCheckConfig(de, e, ge), e
            }, e._getDimension = function() {
                return m(this._element).hasClass(we) ? we : Ce
            }, e._getParent = function() {
                var e, n = this;
                p.isElement(this._config.parent) ? (e = this._config.parent, void 0 !== this._config.parent.jquery && (e = this._config.parent[0])) : e = document.querySelector(this._config.parent);
                var t = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]',
                    i = [].slice.call(e.querySelectorAll(t));
                return m(i).each(function(e, t) {
                    n._addAriaAndCollapsedClass(a._getTargetFromElement(t), [t])
                }), e
            }, e._addAriaAndCollapsedClass = function(e, t) {
                var n = m(e).hasClass(ve);
                t.length && m(t).toggleClass(Ee, !n).attr("aria-expanded", n)
            }, a._getTargetFromElement = function(e) {
                var t = p.getSelectorFromElement(e);
                return t ? document.querySelector(t) : null
            }, a._jQueryInterface = function(i) {
                return this.each(function() {
                    var e = m(this),
                        t = e.data(he),
                        n = l({}, pe, {}, e.data(), {}, "object" == typeof i && i ? i : {});
                    if (!t && n.toggle && /show|hide/.test(i) && (n.toggle = !1), t || (t = new a(this, n), e.data(he, t)), "string" == typeof i) {
                        if (void 0 === t[i]) throw new TypeError('No method named "' + i + '"');
                        t[i]()
                    }
                })
            }, r(a, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return pe
                }
            }]), a
        }();
    m(document).on(_e.CLICK_DATA_API, Se, function(e) {
        "A" === e.currentTarget.tagName && e.preventDefault();
        var n = m(this),
            t = p.getSelectorFromElement(this),
            i = [].slice.call(document.querySelectorAll(t));
        m(i).each(function() {
            var e = m(this),
                t = e.data(he) ? "toggle" : n.data();
            Ne._jQueryInterface.call(e, t)
        })
    }), m.fn[de] = Ne._jQueryInterface, m.fn[de].Constructor = Ne, m.fn[de].noConflict = function() {
        return m.fn[de] = me, Ne._jQueryInterface
    };
    /**!
     * @fileOverview Kickass library to create and place poppers near their reference elements.
     * @version 1.16.0
     * @license
     * Copyright (c) 2016 Federico Zivolo and contributors
     *
     * Permission is hereby granted, free of charge, to any person obtaining a copy
     * of this software and associated documentation files (the "Software"), to deal
     * in the Software without restriction, including without limitation the rights
     * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the Software is
     * furnished to do so, subject to the following conditions:
     *
     * The above copyright notice and this permission notice shall be included in all
     * copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
     * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
     * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
     * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
     * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
     * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
     * SOFTWARE.
     */
    var De = "undefined" != typeof window && "undefined" != typeof document && "undefined" != typeof navigator,
        Ie = function() {
            for (var e = ["Edge", "Trident", "Firefox"], t = 0; t < e.length; t += 1)
                if (De && 0 <= navigator.userAgent.indexOf(e[t])) return 1;
            return 0
        }();
    var Ae = De && window.Promise ? function(e) {
        var t = !1;
        return function() {
            t || (t = !0, window.Promise.resolve().then(function() {
                t = !1, e()
            }))
        }
    } : function(e) {
        var t = !1;
        return function() {
            t || (t = !0, setTimeout(function() {
                t = !1, e()
            }, Ie))
        }
    };

    function Le(e) {
        return e && "[object Function]" === {}.toString.call(e)
    }

    function Oe(e, t) {
        if (1 !== e.nodeType) return [];
        var n = e.ownerDocument.defaultView.getComputedStyle(e, null);
        return t ? n[t] : n
    }

    function ke(e) {
        return "HTML" === e.nodeName ? e : e.parentNode || e.host
    }

    function je(e) {
        if (!e) return document.body;
        switch (e.nodeName) {
            case "HTML":
            case "BODY":
                return e.ownerDocument.body;
            case "#document":
                return e.body
        }
        var t = Oe(e),
            n = t.overflow,
            i = t.overflowX,
            o = t.overflowY;
        return /(auto|scroll|overlay)/.test(n + o + i) ? e : je(ke(e))
    }

    function xe(e) {
        return e && e.referenceNode ? e.referenceNode : e
    }
    var Pe = De && !(!window.MSInputMethodContext || !document.documentMode),
        Be = De && /MSIE 10/.test(navigator.userAgent);

    function He(e) {
        return 11 === e ? Pe : 10 !== e && Pe || Be
    }

    function Me(e) {
        if (!e) return document.documentElement;
        for (var t = He(10) ? document.body : null, n = e.offsetParent || null; n === t && e.nextElementSibling;) n = (e = e.nextElementSibling).offsetParent;
        var i = n && n.nodeName;
        return i && "BODY" !== i && "HTML" !== i ? -1 !== ["TH", "TD", "TABLE"].indexOf(n.nodeName) && "static" === Oe(n, "position") ? Me(n) : n : e ? e.ownerDocument.documentElement : document.documentElement
    }

    function Re(e) {
        return null !== e.parentNode ? Re(e.parentNode) : e
    }

    function Fe(e, t) {
        if (!(e && e.nodeType && t && t.nodeType)) return document.documentElement;
        var n = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
            i = n ? e : t,
            o = n ? t : e,
            s = document.createRange();
        s.setStart(i, 0), s.setEnd(o, 0);
        var r, a, l = s.commonAncestorContainer;
        if (e !== l && t !== l || i.contains(o)) return "BODY" === (a = (r = l).nodeName) || "HTML" !== a && Me(r.firstElementChild) !== r ? Me(l) : l;
        var c = Re(e);
        return c.host ? Fe(c.host, t) : Fe(e, Re(t).host)
    }

    function qe(e, t) {
        var n = "top" === (1 < arguments.length && void 0 !== t ? t : "top") ? "scrollTop" : "scrollLeft",
            i = e.nodeName;
        if ("BODY" !== i && "HTML" !== i) return e[n];
        var o = e.ownerDocument.documentElement;
        return (e.ownerDocument.scrollingElement || o)[n]
    }

    function We(e, t) {
        var n = "x" === t ? "Left" : "Top",
            i = "Left" == n ? "Right" : "Bottom";
        return parseFloat(e["border" + n + "Width"], 10) + parseFloat(e["border" + i + "Width"], 10)
    }

    function Ue(e, t, n, i) {
        return Math.max(t["offset" + e], t["scroll" + e], n["client" + e], n["offset" + e], n["scroll" + e], He(10) ? parseInt(n["offset" + e]) + parseInt(i["margin" + ("Height" === e ? "Top" : "Left")]) + parseInt(i["margin" + ("Height" === e ? "Bottom" : "Right")]) : 0)
    }

    function Ke(e) {
        var t = e.body,
            n = e.documentElement,
            i = He(10) && getComputedStyle(n);
        return {
            height: Ue("Height", t, n, i),
            width: Ue("Width", t, n, i)
        }
    }
    var Qe = function(e, t, n) {
        return t && Ve(e.prototype, t), n && Ve(e, n), e
    };

    function Ve(e, t) {
        for (var n = 0; n < t.length; n++) {
            var i = t[n];
            i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(e, i.key, i)
        }
    }

    function ze(e, t, n) {
        return t in e ? Object.defineProperty(e, t, {
            value: n,
            enumerable: !0,
            configurable: !0,
            writable: !0
        }) : e[t] = n, e
    }
    var Ye = Object.assign || function(e) {
        for (var t = 1; t < arguments.length; t++) {
            var n = arguments[t];
            for (var i in n) Object.prototype.hasOwnProperty.call(n, i) && (e[i] = n[i])
        }
        return e
    };

    function Xe(e) {
        return Ye({}, e, {
            right: e.left + e.width,
            bottom: e.top + e.height
        })
    }

    function Ge(e) {
        var t, n, i = {};
        try {
            He(10) ? (i = e.getBoundingClientRect(), t = qe(e, "top"), n = qe(e, "left"), i.top += t, i.left += n, i.bottom += t, i.right += n) : i = e.getBoundingClientRect()
        } catch (e) {}
        var o, s = {
                left: i.left,
                top: i.top,
                width: i.right - i.left,
                height: i.bottom - i.top
            },
            r = "HTML" === e.nodeName ? Ke(e.ownerDocument) : {},
            a = r.width || e.clientWidth || s.width,
            l = r.height || e.clientHeight || s.height,
            c = e.offsetWidth - a,
            u = e.offsetHeight - l;
        return (c || u) && (c -= We(o = Oe(e), "x"), u -= We(o, "y"), s.width -= c, s.height -= u), Xe(s)
    }

    function Ze(e, t, n) {
        var i = 2 < arguments.length && void 0 !== n && n,
            o = He(10),
            s = "HTML" === t.nodeName,
            r = Ge(e),
            a = Ge(t),
            l = je(e),
            c = Oe(t),
            u = parseFloat(c.borderTopWidth, 10),
            d = parseFloat(c.borderLeftWidth, 10);
        i && s && (a.top = Math.max(a.top, 0), a.left = Math.max(a.left, 0));
        var h, f, m = Xe({
            top: r.top - a.top - u,
            left: r.left - a.left - d,
            width: r.width,
            height: r.height
        });
        return m.marginTop = 0, m.marginLeft = 0, !o && s && (h = parseFloat(c.marginTop, 10), f = parseFloat(c.marginLeft, 10), m.top -= u - h, m.bottom -= u - h, m.left -= d - f, m.right -= d - f, m.marginTop = h, m.marginLeft = f), (o && !i ? t.contains(l) : t === l && "BODY" !== l.nodeName) && (m = function(e, t, n) {
            var i = 2 < arguments.length && void 0 !== n && n,
                o = qe(t, "top"),
                s = qe(t, "left"),
                r = i ? -1 : 1;
            return e.top += o * r, e.bottom += o * r, e.left += s * r, e.right += s * r, e
        }(m, t)), m
    }

    function $e(e) {
        if (!e || !e.parentElement || He()) return document.documentElement;
        for (var t = e.parentElement; t && "none" === Oe(t, "transform");) t = t.parentElement;
        return t || document.documentElement
    }

    function Je(e, t, n, i, o) {
        var s, r, a, l, c, u = 4 < arguments.length && void 0 !== o && o,
            d = {
                top: 0,
                left: 0
            },
            h = u ? $e(e) : Fe(e, xe(t));
        "viewport" === i ? d = function(e, t) {
            var n = 1 < arguments.length && void 0 !== t && t,
                i = e.ownerDocument.documentElement,
                o = Ze(e, i),
                s = Math.max(i.clientWidth, window.innerWidth || 0),
                r = Math.max(i.clientHeight, window.innerHeight || 0),
                a = n ? 0 : qe(i),
                l = n ? 0 : qe(i, "left");
            return Xe({
                top: a - o.top + o.marginTop,
                left: l - o.left + o.marginLeft,
                width: s,
                height: r
            })
        }(h, u) : (s = void 0, "scrollParent" === i ? "BODY" === (s = je(ke(t))).nodeName && (s = e.ownerDocument.documentElement) : s = "window" === i ? e.ownerDocument.documentElement : i, r = Ze(s, h, u), "HTML" !== s.nodeName || function e(t) {
            var n = t.nodeName;
            if ("BODY" === n || "HTML" === n) return !1;
            if ("fixed" === Oe(t, "position")) return !0;
            var i = ke(t);
            return !!i && e(i)
        }(h) ? d = r : (l = (a = Ke(e.ownerDocument)).height, c = a.width, d.top += r.top - r.marginTop, d.bottom = l + r.top, d.left += r.left - r.marginLeft, d.right = c + r.left));
        var f = "number" == typeof(n = n || 0);
        return d.left += f ? n : n.left || 0, d.top += f ? n : n.top || 0, d.right -= f ? n : n.right || 0, d.bottom -= f ? n : n.bottom || 0, d
    }

    function et(e, t, i, n, o, s) {
        var r = 5 < arguments.length && void 0 !== s ? s : 0;
        if (-1 === e.indexOf("auto")) return e;
        var a = Je(i, n, r, o),
            l = {
                top: {
                    width: a.width,
                    height: t.top - a.top
                },
                right: {
                    width: a.right - t.right,
                    height: a.height
                },
                bottom: {
                    width: a.width,
                    height: a.bottom - t.bottom
                },
                left: {
                    width: t.left - a.left,
                    height: a.height
                }
            },
            c = Object.keys(l).map(function(e) {
                return Ye({
                    key: e
                }, l[e], {
                    area: (t = l[e]).width * t.height
                });
                var t
            }).sort(function(e, t) {
                return t.area - e.area
            }),
            u = c.filter(function(e) {
                var t = e.width,
                    n = e.height;
                return t >= i.clientWidth && n >= i.clientHeight
            }),
            d = 0 < u.length ? u[0].key : c[0].key,
            h = e.split("-")[1];
        return d + (h ? "-" + h : "")
    }

    function tt(e, t, n, i) {
        var o = 3 < arguments.length && void 0 !== i ? i : null;
        return Ze(n, o ? $e(t) : Fe(t, xe(n)), o)
    }

    function nt(e) {
        var t = e.ownerDocument.defaultView.getComputedStyle(e),
            n = parseFloat(t.marginTop || 0) + parseFloat(t.marginBottom || 0),
            i = parseFloat(t.marginLeft || 0) + parseFloat(t.marginRight || 0);
        return {
            width: e.offsetWidth + i,
            height: e.offsetHeight + n
        }
    }

    function it(e) {
        var t = {
            left: "right",
            right: "left",
            bottom: "top",
            top: "bottom"
        };
        return e.replace(/left|right|bottom|top/g, function(e) {
            return t[e]
        })
    }

    function ot(e, t, n) {
        n = n.split("-")[0];
        var i = nt(e),
            o = {
                width: i.width,
                height: i.height
            },
            s = -1 !== ["right", "left"].indexOf(n),
            r = s ? "top" : "left",
            a = s ? "left" : "top",
            l = s ? "height" : "width",
            c = s ? "width" : "height";
        return o[r] = t[r] + t[l] / 2 - i[l] / 2, o[a] = n === a ? t[a] - i[c] : t[it(a)], o
    }

    function st(e, t) {
        return Array.prototype.find ? e.find(t) : e.filter(t)[0]
    }

    function rt(e, n, t) {
        return (void 0 === t ? e : e.slice(0, function(e, t, n) {
            if (Array.prototype.findIndex) return e.findIndex(function(e) {
                return e[t] === n
            });
            var i = st(e, function(e) {
                return e[t] === n
            });
            return e.indexOf(i)
        }(e, "name", t))).forEach(function(e) {
            e.function && console.warn("`modifier.function` is deprecated, use `modifier.fn`!");
            var t = e.function || e.fn;
            e.enabled && Le(t) && (n.offsets.popper = Xe(n.offsets.popper), n.offsets.reference = Xe(n.offsets.reference), n = t(n, e))
        }), n
    }

    function at(e, n) {
        return e.some(function(e) {
            var t = e.name;
            return e.enabled && t === n
        })
    }

    function lt(e) {
        for (var t = [!1, "ms", "Webkit", "Moz", "O"], n = e.charAt(0).toUpperCase() + e.slice(1), i = 0; i < t.length; i++) {
            var o = t[i],
                s = o ? "" + o + n : e;
            if (void 0 !== document.body.style[s]) return s
        }
        return null
    }

    function ct(e) {
        var t = e.ownerDocument;
        return t ? t.defaultView : window
    }

    function ut(e, t, n, i) {
        n.updateBound = i, ct(e).addEventListener("resize", n.updateBound, {
            passive: !0
        });
        var o = je(e);
        return function e(t, n, i, o) {
            var s = "BODY" === t.nodeName,
                r = s ? t.ownerDocument.defaultView : t;
            r.addEventListener(n, i, {
                passive: !0
            }), s || e(je(r.parentNode), n, i, o), o.push(r)
        }(o, "scroll", n.updateBound, n.scrollParents), n.scrollElement = o, n.eventsEnabled = !0, n
    }

    function dt() {
        var e, t;
        this.state.eventsEnabled && (cancelAnimationFrame(this.scheduleUpdate), this.state = (e = this.reference, t = this.state, ct(e).removeEventListener("resize", t.updateBound), t.scrollParents.forEach(function(e) {
            e.removeEventListener("scroll", t.updateBound)
        }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t))
    }

    function ht(e) {
        return "" !== e && !isNaN(parseFloat(e)) && isFinite(e)
    }

    function ft(n, i) {
        Object.keys(i).forEach(function(e) {
            var t = ""; - 1 !== ["width", "height", "top", "right", "bottom", "left"].indexOf(e) && ht(i[e]) && (t = "px"), n.style[e] = i[e] + t
        })
    }

    function mt(e, t) {
        function n(e) {
            return e
        }
        var i = e.offsets,
            o = i.popper,
            s = i.reference,
            r = Math.round,
            a = Math.floor,
            l = r(s.width),
            c = r(o.width),
            u = -1 !== ["left", "right"].indexOf(e.placement),
            d = -1 !== e.placement.indexOf("-"),
            h = t ? u || d || l % 2 == c % 2 ? r : a : n,
            f = t ? r : n;
        return {
            left: h(l % 2 == 1 && c % 2 == 1 && !d && t ? o.left - 1 : o.left),
            top: f(o.top),
            bottom: f(o.bottom),
            right: h(o.right)
        }
    }
    var pt = De && /Firefox/i.test(navigator.userAgent);

    function gt(e, t, n) {
        var i, o, s = st(e, function(e) {
                return e.name === t
            }),
            r = !!s && e.some(function(e) {
                return e.name === n && e.enabled && e.order < s.order
            });
        return r || (i = "`" + t + "`", o = "`" + n + "`", console.warn(o + " modifier is required by " + i + " modifier in order to work, be sure to include it before " + i + "!")), r
    }
    var _t = ["auto-start", "auto", "auto-end", "top-start", "top", "top-end", "right-start", "right", "right-end", "bottom-end", "bottom", "bottom-start", "left-end", "left", "left-start"],
        vt = _t.slice(3);

    function yt(e, t) {
        var n = 1 < arguments.length && void 0 !== t && t,
            i = vt.indexOf(e),
            o = vt.slice(i + 1).concat(vt.slice(0, i));
        return n ? o.reverse() : o
    }
    var bt = "flip",
        Et = "clockwise",
        wt = "counterclockwise";

    function Ct(e, o, s, t) {
        var r = [0, 0],
            a = -1 !== ["right", "left"].indexOf(t),
            n = e.split(/(\+|\-)/).map(function(e) {
                return e.trim()
            }),
            i = n.indexOf(st(n, function(e) {
                return -1 !== e.search(/,|\s/)
            }));
        n[i] && -1 === n[i].indexOf(",") && console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");
        var l = /\s*,\s*|\s+/;
        return (-1 !== i ? [n.slice(0, i).concat([n[i].split(l)[0]]), [n[i].split(l)[1]].concat(n.slice(i + 1))] : [n]).map(function(e, t) {
            var n = (1 === t ? !a : a) ? "height" : "width",
                i = !1;
            return e.reduce(function(e, t) {
                return "" === e[e.length - 1] && -1 !== ["+", "-"].indexOf(t) ? (e[e.length - 1] = t, i = !0, e) : i ? (e[e.length - 1] += t, i = !1, e) : e.concat(t)
            }, []).map(function(e) {
                return function(e, t, n, i) {
                    var o = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
                        s = +o[1],
                        r = o[2];
                    if (!s) return e;
                    if (0 !== r.indexOf("%")) return "vh" !== r && "vw" !== r ? s : ("vh" === r ? Math.max(document.documentElement.clientHeight, window.innerHeight || 0) : Math.max(document.documentElement.clientWidth, window.innerWidth || 0)) / 100 * s;
                    var a = void 0;
                    switch (r) {
                        case "%p":
                            a = n;
                            break;
                        case "%":
                        case "%r":
                        default:
                            a = i
                    }
                    return Xe(a)[t] / 100 * s
                }(e, n, o, s)
            })
        }).forEach(function(n, i) {
            n.forEach(function(e, t) {
                ht(e) && (r[i] += e * ("-" === n[t - 1] ? -1 : 1))
            })
        }), r
    }
    var Tt = {
            placement: "bottom",
            positionFixed: !1,
            eventsEnabled: !0,
            removeOnDestroy: !1,
            onCreate: function() {},
            onUpdate: function() {},
            modifiers: {
                shift: {
                    order: 100,
                    enabled: !0,
                    fn: function(e) {
                        var t, n, i, o, s, r, a, l = e.placement,
                            c = l.split("-")[0],
                            u = l.split("-")[1];
                        return u && (n = (t = e.offsets).reference, i = t.popper, r = (o = -1 !== ["bottom", "top"].indexOf(c)) ? "width" : "height", a = {
                            start: ze({}, s = o ? "left" : "top", n[s]),
                            end: ze({}, s, n[s] + n[r] - i[r])
                        }, e.offsets.popper = Ye({}, i, a[u])), e
                    }
                },
                offset: {
                    order: 200,
                    enabled: !0,
                    fn: function(e, t) {
                        var n = t.offset,
                            i = e.placement,
                            o = e.offsets,
                            s = o.popper,
                            r = o.reference,
                            a = i.split("-")[0],
                            l = void 0,
                            l = ht(+n) ? [+n, 0] : Ct(n, s, r, a);
                        return "left" === a ? (s.top += l[0], s.left -= l[1]) : "right" === a ? (s.top += l[0], s.left += l[1]) : "top" === a ? (s.left += l[0], s.top -= l[1]) : "bottom" === a && (s.left += l[0], s.top += l[1]), e.popper = s, e
                    },
                    offset: 0
                },
                preventOverflow: {
                    order: 300,
                    enabled: !0,
                    fn: function(e, i) {
                        var t = i.boundariesElement || Me(e.instance.popper);
                        e.instance.reference === t && (t = Me(t));
                        var n = lt("transform"),
                            o = e.instance.popper.style,
                            s = o.top,
                            r = o.left,
                            a = o[n];
                        o.top = "", o.left = "", o[n] = "";
                        var l = Je(e.instance.popper, e.instance.reference, i.padding, t, e.positionFixed);
                        o.top = s, o.left = r, o[n] = a, i.boundaries = l;
                        var c = i.priority,
                            u = e.offsets.popper,
                            d = {
                                primary: function(e) {
                                    var t = u[e];
                                    return u[e] < l[e] && !i.escapeWithReference && (t = Math.max(u[e], l[e])), ze({}, e, t)
                                },
                                secondary: function(e) {
                                    var t = "right" === e ? "left" : "top",
                                        n = u[t];
                                    return u[e] > l[e] && !i.escapeWithReference && (n = Math.min(u[t], l[e] - ("right" === e ? u.width : u.height))), ze({}, t, n)
                                }
                            };
                        return c.forEach(function(e) {
                            var t = -1 !== ["left", "top"].indexOf(e) ? "primary" : "secondary";
                            u = Ye({}, u, d[t](e))
                        }), e.offsets.popper = u, e
                    },
                    priority: ["left", "right", "top", "bottom"],
                    padding: 5,
                    boundariesElement: "scrollParent"
                },
                keepTogether: {
                    order: 400,
                    enabled: !0,
                    fn: function(e) {
                        var t = e.offsets,
                            n = t.popper,
                            i = t.reference,
                            o = e.placement.split("-")[0],
                            s = Math.floor,
                            r = -1 !== ["top", "bottom"].indexOf(o),
                            a = r ? "right" : "bottom",
                            l = r ? "left" : "top",
                            c = r ? "width" : "height";
                        return n[a] < s(i[l]) && (e.offsets.popper[l] = s(i[l]) - n[c]), n[l] > s(i[a]) && (e.offsets.popper[l] = s(i[a])), e
                    }
                },
                arrow: {
                    order: 500,
                    enabled: !0,
                    fn: function(e, t) {
                        var n;
                        if (!gt(e.instance.modifiers, "arrow", "keepTogether")) return e;
                        var i = t.element;
                        if ("string" == typeof i) {
                            if (!(i = e.instance.popper.querySelector(i))) return e
                        } else if (!e.instance.popper.contains(i)) return console.warn("WARNING: `arrow.element` must be child of its popper element!"), e;
                        var o = e.placement.split("-")[0],
                            s = e.offsets,
                            r = s.popper,
                            a = s.reference,
                            l = -1 !== ["left", "right"].indexOf(o),
                            c = l ? "height" : "width",
                            u = l ? "Top" : "Left",
                            d = u.toLowerCase(),
                            h = l ? "left" : "top",
                            f = l ? "bottom" : "right",
                            m = nt(i)[c];
                        a[f] - m < r[d] && (e.offsets.popper[d] -= r[d] - (a[f] - m)), a[d] + m > r[f] && (e.offsets.popper[d] += a[d] + m - r[f]), e.offsets.popper = Xe(e.offsets.popper);
                        var p = a[d] + a[c] / 2 - m / 2,
                            g = Oe(e.instance.popper),
                            _ = parseFloat(g["margin" + u], 10),
                            v = parseFloat(g["border" + u + "Width"], 10),
                            y = p - e.offsets.popper[d] - _ - v,
                            y = Math.max(Math.min(r[c] - m, y), 0);
                        return e.arrowElement = i, e.offsets.arrow = (ze(n = {}, d, Math.round(y)), ze(n, h, ""), n), e
                    },
                    element: "[x-arrow]"
                },
                flip: {
                    order: 600,
                    enabled: !0,
                    fn: function(g, _) {
                        if (at(g.instance.modifiers, "inner")) return g;
                        if (g.flipped && g.placement === g.originalPlacement) return g;
                        var v = Je(g.instance.popper, g.instance.reference, _.padding, _.boundariesElement, g.positionFixed),
                            y = g.placement.split("-")[0],
                            b = it(y),
                            E = g.placement.split("-")[1] || "",
                            w = [];
                        switch (_.behavior) {
                            case bt:
                                w = [y, b];
                                break;
                            case Et:
                                w = yt(y);
                                break;
                            case wt:
                                w = yt(y, !0);
                                break;
                            default:
                                w = _.behavior
                        }
                        return w.forEach(function(e, t) {
                            if (y !== e || w.length === t + 1) return g;
                            y = g.placement.split("-")[0], b = it(y);
                            var n, i = g.offsets.popper,
                                o = g.offsets.reference,
                                s = Math.floor,
                                r = "left" === y && s(i.right) > s(o.left) || "right" === y && s(i.left) < s(o.right) || "top" === y && s(i.bottom) > s(o.top) || "bottom" === y && s(i.top) < s(o.bottom),
                                a = s(i.left) < s(v.left),
                                l = s(i.right) > s(v.right),
                                c = s(i.top) < s(v.top),
                                u = s(i.bottom) > s(v.bottom),
                                d = "left" === y && a || "right" === y && l || "top" === y && c || "bottom" === y && u,
                                h = -1 !== ["top", "bottom"].indexOf(y),
                                f = !!_.flipVariations && (h && "start" === E && a || h && "end" === E && l || !h && "start" === E && c || !h && "end" === E && u),
                                m = !!_.flipVariationsByContent && (h && "start" === E && l || h && "end" === E && a || !h && "start" === E && u || !h && "end" === E && c),
                                p = f || m;
                            (r || d || p) && (g.flipped = !0, (r || d) && (y = w[t + 1]), p && (E = "end" === (n = E) ? "start" : "start" === n ? "end" : n), g.placement = y + (E ? "-" + E : ""), g.offsets.popper = Ye({}, g.offsets.popper, ot(g.instance.popper, g.offsets.reference, g.placement)), g = rt(g.instance.modifiers, g, "flip"))
                        }), g
                    },
                    behavior: "flip",
                    padding: 5,
                    boundariesElement: "viewport",
                    flipVariations: !1,
                    flipVariationsByContent: !1
                },
                inner: {
                    order: 700,
                    enabled: !1,
                    fn: function(e) {
                        var t = e.placement,
                            n = t.split("-")[0],
                            i = e.offsets,
                            o = i.popper,
                            s = i.reference,
                            r = -1 !== ["left", "right"].indexOf(n),
                            a = -1 === ["top", "left"].indexOf(n);
                        return o[r ? "left" : "top"] = s[n] - (a ? o[r ? "width" : "height"] : 0), e.placement = it(t), e.offsets.popper = Xe(o), e
                    }
                },
                hide: {
                    order: 800,
                    enabled: !0,
                    fn: function(e) {
                        if (!gt(e.instance.modifiers, "hide", "preventOverflow")) return e;
                        var t = e.offsets.reference,
                            n = st(e.instance.modifiers, function(e) {
                                return "preventOverflow" === e.name
                            }).boundaries;
                        if (t.bottom < n.top || t.left > n.right || t.top > n.bottom || t.right < n.left) {
                            if (!0 === e.hide) return e;
                            e.hide = !0, e.attributes["x-out-of-boundaries"] = ""
                        } else {
                            if (!1 === e.hide) return e;
                            e.hide = !1, e.attributes["x-out-of-boundaries"] = !1
                        }
                        return e
                    }
                },
                computeStyle: {
                    order: 850,
                    enabled: !0,
                    fn: function(e, t) {
                        var n = t.x,
                            i = t.y,
                            o = e.offsets.popper,
                            s = st(e.instance.modifiers, function(e) {
                                return "applyStyle" === e.name
                            }).gpuAcceleration;
                        void 0 !== s && console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");
                        var r, a, l = void 0 !== s ? s : t.gpuAcceleration,
                            c = Me(e.instance.popper),
                            u = Ge(c),
                            d = {
                                position: o.position
                            },
                            h = mt(e, window.devicePixelRatio < 2 || !pt),
                            f = "bottom" === n ? "top" : "bottom",
                            m = "right" === i ? "left" : "right",
                            p = lt("transform"),
                            g = void 0,
                            _ = void 0,
                            _ = "bottom" == f ? "HTML" === c.nodeName ? -c.clientHeight + h.bottom : -u.height + h.bottom : h.top,
                            g = "right" == m ? "HTML" === c.nodeName ? -c.clientWidth + h.right : -u.width + h.right : h.left;
                        l && p ? (d[p] = "translate3d(" + g + "px, " + _ + "px, 0)", d[f] = 0, d[m] = 0, d.willChange = "transform") : (r = "bottom" == f ? -1 : 1, a = "right" == m ? -1 : 1, d[f] = _ * r, d[m] = g * a, d.willChange = f + ", " + m);
                        var v = {
                            "x-placement": e.placement
                        };
                        return e.attributes = Ye({}, v, e.attributes), e.styles = Ye({}, d, e.styles), e.arrowStyles = Ye({}, e.offsets.arrow, e.arrowStyles), e
                    },
                    gpuAcceleration: !0,
                    x: "bottom",
                    y: "right"
                },
                applyStyle: {
                    order: 900,
                    enabled: !0,
                    fn: function(e) {
                        var t, n;
                        return ft(e.instance.popper, e.styles), t = e.instance.popper, n = e.attributes, Object.keys(n).forEach(function(e) {
                            !1 !== n[e] ? t.setAttribute(e, n[e]) : t.removeAttribute(e)
                        }), e.arrowElement && Object.keys(e.arrowStyles).length && ft(e.arrowElement, e.arrowStyles), e
                    },
                    onLoad: function(e, t, n, i, o) {
                        var s = tt(o, t, e, n.positionFixed),
                            r = et(n.placement, s, t, e, n.modifiers.flip.boundariesElement, n.modifiers.flip.padding);
                        return t.setAttribute("x-placement", r), ft(t, {
                            position: n.positionFixed ? "fixed" : "absolute"
                        }), n
                    },
                    gpuAcceleration: void 0
                }
            }
        },
        St = (Qe(Nt, [{
            key: "update",
            value: function() {
                return function() {
                    var e;
                    this.state.isDestroyed || ((e = {
                        instance: this,
                        styles: {},
                        arrowStyles: {},
                        attributes: {},
                        flipped: !1,
                        offsets: {}
                    }).offsets.reference = tt(this.state, this.popper, this.reference, this.options.positionFixed), e.placement = et(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.positionFixed = this.options.positionFixed, e.offsets.popper = ot(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = this.options.positionFixed ? "fixed" : "absolute", e = rt(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e)))
                }.call(this)
            }
        }, {
            key: "destroy",
            value: function() {
                return function() {
                    return this.state.isDestroyed = !0, at(this.modifiers, "applyStyle") && (this.popper.removeAttribute("x-placement"), this.popper.style.position = "", this.popper.style.top = "", this.popper.style.left = "", this.popper.style.right = "", this.popper.style.bottom = "", this.popper.style.willChange = "", this.popper.style[lt("transform")] = ""), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this
                }.call(this)
            }
        }, {
            key: "enableEventListeners",
            value: function() {
                return function() {
                    this.state.eventsEnabled || (this.state = ut(this.reference, this.options, this.state, this.scheduleUpdate))
                }.call(this)
            }
        }, {
            key: "disableEventListeners",
            value: function() {
                return dt.call(this)
            }
        }]), Nt);

    function Nt(e, t) {
        var n = this,
            i = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};
        ! function(e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function")
        }(this, Nt), this.scheduleUpdate = function() {
            return requestAnimationFrame(n.update)
        }, this.update = Ae(this.update.bind(this)), this.options = Ye({}, Nt.Defaults, i), this.state = {
            isDestroyed: !1,
            isCreated: !1,
            scrollParents: []
        }, this.reference = e && e.jquery ? e[0] : e, this.popper = t && t.jquery ? t[0] : t, this.options.modifiers = {}, Object.keys(Ye({}, Nt.Defaults.modifiers, i.modifiers)).forEach(function(e) {
            n.options.modifiers[e] = Ye({}, Nt.Defaults.modifiers[e] || {}, i.modifiers ? i.modifiers[e] : {})
        }), this.modifiers = Object.keys(this.options.modifiers).map(function(e) {
            return Ye({
                name: e
            }, n.options.modifiers[e])
        }).sort(function(e, t) {
            return e.order - t.order
        }), this.modifiers.forEach(function(e) {
            e.enabled && Le(e.onLoad) && e.onLoad(n.reference, n.popper, n.options, e, n.state)
        }), this.update();
        var o = this.options.eventsEnabled;
        o && this.enableEventListeners(), this.state.eventsEnabled = o
    }
    St.Utils = ("undefined" != typeof window ? window : global).PopperUtils, St.placements = _t, St.Defaults = Tt;
    var Dt = "dropdown",
        It = "bs.dropdown",
        At = "." + It,
        Lt = ".data-api",
        Ot = m.fn[Dt],
        kt = new RegExp("38|40|27"),
        jt = {
            HIDE: "hide" + At,
            HIDDEN: "hidden" + At,
            SHOW: "show" + At,
            SHOWN: "shown" + At,
            CLICK: "click" + At,
            CLICK_DATA_API: "click" + At + Lt,
            KEYDOWN_DATA_API: "keydown" + At + Lt,
            KEYUP_DATA_API: "keyup" + At + Lt
        },
        xt = "disabled",
        Pt = "show",
        Bt = "dropup",
        Ht = "dropright",
        Mt = "dropleft",
        Rt = "dropdown-menu-right",
        Ft = "position-static",
        qt = '[data-toggle="dropdown"]',
        Wt = ".dropdown form",
        Ut = ".dropdown-menu",
        Kt = ".navbar-nav",
        Qt = ".dropdown-menu .dropdown-item:not(.disabled):not(:disabled)",
        Vt = "top-start",
        zt = "top-end",
        Yt = "bottom-start",
        Xt = "bottom-end",
        Gt = "right-start",
        Zt = "left-start",
        $t = {
            offset: 0,
            flip: !0,
            boundary: "scrollParent",
            reference: "toggle",
            display: "dynamic",
            popperConfig: null
        },
        Jt = {
            offset: "(number|string|function)",
            flip: "boolean",
            boundary: "(string|element)",
            reference: "(string|element)",
            display: "string",
            popperConfig: "(null|object)"
        },
        en = function() {
            function c(e, t) {
                this._element = e, this._popper = null, this._config = this._getConfig(t), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners()
            }
            var e = c.prototype;
            return e.toggle = function() {
                var e;
                this._element.disabled || m(this._element).hasClass(xt) || (e = m(this._menu).hasClass(Pt), c._clearMenus(), e || this.show(!0))
            }, e.show = function(e) {
                if (void 0 === e && (e = !1), !(this._element.disabled || m(this._element).hasClass(xt) || m(this._menu).hasClass(Pt))) {
                    var t = {
                            relatedTarget: this._element
                        },
                        n = m.Event(jt.SHOW, t),
                        i = c._getParentFromElement(this._element);
                    if (m(i).trigger(n), !n.isDefaultPrevented()) {
                        if (!this._inNavbar && e) {
                            if (void 0 === St) throw new TypeError("Bootstrap's dropdowns require Popper.js (https://popper.js.org/)");
                            var o = this._element;
                            "parent" === this._config.reference ? o = i : p.isElement(this._config.reference) && (o = this._config.reference, void 0 !== this._config.reference.jquery && (o = this._config.reference[0])), "scrollParent" !== this._config.boundary && m(i).addClass(Ft), this._popper = new St(o, this._menu, this._getPopperConfig())
                        }
                        "ontouchstart" in document.documentElement && 0 === m(i).closest(Kt).length && m(document.body).children().on("mouseover", null, m.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), m(this._menu).toggleClass(Pt), m(i).toggleClass(Pt).trigger(m.Event(jt.SHOWN, t))
                    }
                }
            }, e.hide = function() {
                var e, t, n;
                this._element.disabled || m(this._element).hasClass(xt) || !m(this._menu).hasClass(Pt) || (e = {
                    relatedTarget: this._element
                }, t = m.Event(jt.HIDE, e), n = c._getParentFromElement(this._element), m(n).trigger(t), t.isDefaultPrevented() || (this._popper && this._popper.destroy(), m(this._menu).toggleClass(Pt), m(n).toggleClass(Pt).trigger(m.Event(jt.HIDDEN, e))))
            }, e.dispose = function() {
                m.removeData(this._element, It), m(this._element).off(At), this._element = null, (this._menu = null) !== this._popper && (this._popper.destroy(), this._popper = null)
            }, e.update = function() {
                this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate()
            }, e._addEventListeners = function() {
                var t = this;
                m(this._element).on(jt.CLICK, function(e) {
                    e.preventDefault(), e.stopPropagation(), t.toggle()
                })
            }, e._getConfig = function(e) {
                return e = l({}, this.constructor.Default, {}, m(this._element).data(), {}, e), p.typeCheckConfig(Dt, e, this.constructor.DefaultType), e
            }, e._getMenuElement = function() {
                var e;
                return this._menu || (e = c._getParentFromElement(this._element)) && (this._menu = e.querySelector(Ut)), this._menu
            }, e._getPlacement = function() {
                var e = m(this._element.parentNode),
                    t = Yt;
                return e.hasClass(Bt) ? (t = Vt, m(this._menu).hasClass(Rt) && (t = zt)) : e.hasClass(Ht) ? t = Gt : e.hasClass(Mt) ? t = Zt : m(this._menu).hasClass(Rt) && (t = Xt), t
            }, e._detectNavbar = function() {
                return 0 < m(this._element).closest(".navbar").length
            }, e._getOffset = function() {
                var t = this,
                    e = {};
                return "function" == typeof this._config.offset ? e.fn = function(e) {
                    return e.offsets = l({}, e.offsets, {}, t._config.offset(e.offsets, t._element) || {}), e
                } : e.offset = this._config.offset, e
            }, e._getPopperConfig = function() {
                var e = {
                    placement: this._getPlacement(),
                    modifiers: {
                        offset: this._getOffset(),
                        flip: {
                            enabled: this._config.flip
                        },
                        preventOverflow: {
                            boundariesElement: this._config.boundary
                        }
                    }
                };
                return "static" === this._config.display && (e.modifiers.applyStyle = {
                    enabled: !1
                }), l({}, e, {}, this._config.popperConfig)
            }, c._jQueryInterface = function(t) {
                return this.each(function() {
                    var e = m(this).data(It);
                    if (e || (e = new c(this, "object" == typeof t ? t : null), m(this).data(It, e)), "string" == typeof t) {
                        if (void 0 === e[t]) throw new TypeError('No method named "' + t + '"');
                        e[t]()
                    }
                })
            }, c._clearMenus = function(e) {
                if (!e || 3 !== e.which && ("keyup" !== e.type || 9 === e.which))
                    for (var t = [].slice.call(document.querySelectorAll(qt)), n = 0, i = t.length; n < i; n++) {
                        var o, s, r = c._getParentFromElement(t[n]),
                            a = m(t[n]).data(It),
                            l = {
                                relatedTarget: t[n]
                            };
                        e && "click" === e.type && (l.clickEvent = e), a && (o = a._menu, m(r).hasClass(Pt) && (e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "keyup" === e.type && 9 === e.which) && m.contains(r, e.target) || (s = m.Event(jt.HIDE, l), m(r).trigger(s), s.isDefaultPrevented() || ("ontouchstart" in document.documentElement && m(document.body).children().off("mouseover", null, m.noop), t[n].setAttribute("aria-expanded", "false"), a._popper && a._popper.destroy(), m(o).removeClass(Pt), m(r).removeClass(Pt).trigger(m.Event(jt.HIDDEN, l))))))
                    }
            }, c._getParentFromElement = function(e) {
                var t, n = p.getSelectorFromElement(e);
                return n && (t = document.querySelector(n)), t || e.parentNode
            }, c._dataApiKeydownHandler = function(e) {
                if ((/input|textarea/i.test(e.target.tagName) ? !(32 === e.which || 27 !== e.which && (40 !== e.which && 38 !== e.which || m(e.target).closest(Ut).length)) : kt.test(e.which)) && (e.preventDefault(), e.stopPropagation(), !this.disabled && !m(this).hasClass(xt))) {
                    var t, n = c._getParentFromElement(this),
                        i = m(n).hasClass(Pt);
                    if (i || 27 !== e.which) {
                        if (!i || i && (27 === e.which || 32 === e.which)) return 27 === e.which && (t = n.querySelector(qt), m(t).trigger("focus")), void m(this).trigger("click");
                        var o, s = [].slice.call(n.querySelectorAll(Qt)).filter(function(e) {
                            return m(e).is(":visible")
                        });
                        0 !== s.length && (o = s.indexOf(e.target), 38 === e.which && 0 < o && o--, 40 === e.which && o < s.length - 1 && o++, o < 0 && (o = 0), s[o].focus())
                    }
                }
            }, r(c, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return $t
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return Jt
                }
            }]), c
        }();
    m(document).on(jt.KEYDOWN_DATA_API, qt, en._dataApiKeydownHandler).on(jt.KEYDOWN_DATA_API, Ut, en._dataApiKeydownHandler).on(jt.CLICK_DATA_API + " " + jt.KEYUP_DATA_API, en._clearMenus).on(jt.CLICK_DATA_API, qt, function(e) {
        e.preventDefault(), e.stopPropagation(), en._jQueryInterface.call(m(this), "toggle")
    }).on(jt.CLICK_DATA_API, Wt, function(e) {
        e.stopPropagation()
    }), m.fn[Dt] = en._jQueryInterface, m.fn[Dt].Constructor = en, m.fn[Dt].noConflict = function() {
        return m.fn[Dt] = Ot, en._jQueryInterface
    };
    var tn = "modal",
        nn = "bs.modal",
        on = "." + nn,
        sn = m.fn[tn],
        rn = {
            backdrop: !0,
            keyboard: !0,
            focus: !0,
            show: !0
        },
        an = {
            backdrop: "(boolean|string)",
            keyboard: "boolean",
            focus: "boolean",
            show: "boolean"
        },
        ln = {
            HIDE: "hide" + on,
            HIDE_PREVENTED: "hidePrevented" + on,
            HIDDEN: "hidden" + on,
            SHOW: "show" + on,
            SHOWN: "shown" + on,
            FOCUSIN: "focusin" + on,
            RESIZE: "resize" + on,
            CLICK_DISMISS: "click.dismiss" + on,
            KEYDOWN_DISMISS: "keydown.dismiss" + on,
            MOUSEUP_DISMISS: "mouseup.dismiss" + on,
            MOUSEDOWN_DISMISS: "mousedown.dismiss" + on,
            CLICK_DATA_API: "click" + on + ".data-api"
        },
        cn = "modal-dialog-scrollable",
        un = "modal-scrollbar-measure",
        dn = "modal-backdrop",
        hn = "modal-open",
        fn = "fade",
        mn = "show",
        pn = "modal-static",
        gn = ".modal-dialog",
        _n = ".modal-body",
        vn = '[data-toggle="modal"]',
        yn = '[data-dismiss="modal"]',
        bn = ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
        En = ".sticky-top",
        wn = function() {
            function o(e, t) {
                this._config = this._getConfig(t), this._element = e, this._dialog = e.querySelector(gn), this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._isTransitioning = !1, this._scrollbarWidth = 0
            }
            var e = o.prototype;
            return e.toggle = function(e) {
                return this._isShown ? this.hide() : this.show(e)
            }, e.show = function(e) {
                var t, n = this;
                this._isShown || this._isTransitioning || (m(this._element).hasClass(fn) && (this._isTransitioning = !0), t = m.Event(ln.SHOW, {
                    relatedTarget: e
                }), m(this._element).trigger(t), this._isShown || t.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), this._setEscapeEvent(), this._setResizeEvent(), m(this._element).on(ln.CLICK_DISMISS, yn, function(e) {
                    return n.hide(e)
                }), m(this._dialog).on(ln.MOUSEDOWN_DISMISS, function() {
                    m(n._element).one(ln.MOUSEUP_DISMISS, function(e) {
                        m(e.target).is(n._element) && (n._ignoreBackdropClick = !0)
                    })
                }), this._showBackdrop(function() {
                    return n._showElement(e)
                })))
            }, e.hide = function(e) {
                var t, n, i, o = this;
                e && e.preventDefault(), this._isShown && !this._isTransitioning && (t = m.Event(ln.HIDE), m(this._element).trigger(t), this._isShown && !t.isDefaultPrevented() && (this._isShown = !1, (n = m(this._element).hasClass(fn)) && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), m(document).off(ln.FOCUSIN), m(this._element).removeClass(mn), m(this._element).off(ln.CLICK_DISMISS), m(this._dialog).off(ln.MOUSEDOWN_DISMISS), n ? (i = p.getTransitionDurationFromElement(this._element), m(this._element).one(p.TRANSITION_END, function(e) {
                    return o._hideModal(e)
                }).emulateTransitionEnd(i)) : this._hideModal()))
            }, e.dispose = function() {
                [window, this._element, this._dialog].forEach(function(e) {
                    return m(e).off(on)
                }), m(document).off(ln.FOCUSIN), m.removeData(this._element, nn), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._isTransitioning = null, this._scrollbarWidth = null
            }, e.handleUpdate = function() {
                this._adjustDialog()
            }, e._getConfig = function(e) {
                return e = l({}, rn, {}, e), p.typeCheckConfig(tn, e, an), e
            }, e._triggerBackdropTransition = function() {
                var e = this;
                if ("static" === this._config.backdrop) {
                    var t = m.Event(ln.HIDE_PREVENTED);
                    if (m(this._element).trigger(t), t.defaultPrevented) return;
                    this._element.classList.add(pn);
                    var n = p.getTransitionDurationFromElement(this._element);
                    m(this._element).one(p.TRANSITION_END, function() {
                        e._element.classList.remove(pn)
                    }).emulateTransitionEnd(n), this._element.focus()
                } else this.hide()
            }, e._showElement = function(e) {
                var t = this,
                    n = m(this._element).hasClass(fn),
                    i = this._dialog ? this._dialog.querySelector(_n) : null;
                this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.setAttribute("aria-modal", !0), m(this._dialog).hasClass(cn) && i ? i.scrollTop = 0 : this._element.scrollTop = 0, n && p.reflow(this._element), m(this._element).addClass(mn), this._config.focus && this._enforceFocus();

                function o() {
                    t._config.focus && t._element.focus(), t._isTransitioning = !1, m(t._element).trigger(r)
                }
                var s, r = m.Event(ln.SHOWN, {
                    relatedTarget: e
                });
                n ? (s = p.getTransitionDurationFromElement(this._dialog), m(this._dialog).one(p.TRANSITION_END, o).emulateTransitionEnd(s)) : o()
            }, e._enforceFocus = function() {
                var t = this;
                m(document).off(ln.FOCUSIN).on(ln.FOCUSIN, function(e) {
                    document !== e.target && t._element !== e.target && 0 === m(t._element).has(e.target).length && t._element.focus()
                })
            }, e._setEscapeEvent = function() {
                var t = this;
                this._isShown && this._config.keyboard ? m(this._element).on(ln.KEYDOWN_DISMISS, function(e) {
                    27 === e.which && t._triggerBackdropTransition()
                }) : this._isShown || m(this._element).off(ln.KEYDOWN_DISMISS)
            }, e._setResizeEvent = function() {
                var t = this;
                this._isShown ? m(window).on(ln.RESIZE, function(e) {
                    return t.handleUpdate(e)
                }) : m(window).off(ln.RESIZE)
            }, e._hideModal = function() {
                var e = this;
                this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._element.removeAttribute("aria-modal"), this._isTransitioning = !1, this._showBackdrop(function() {
                    m(document.body).removeClass(hn), e._resetAdjustments(), e._resetScrollbar(), m(e._element).trigger(ln.HIDDEN)
                })
            }, e._removeBackdrop = function() {
                this._backdrop && (m(this._backdrop).remove(), this._backdrop = null)
            }, e._showBackdrop = function(e) {
                var t, n, i = this,
                    o = m(this._element).hasClass(fn) ? fn : "";
                if (this._isShown && this._config.backdrop) {
                    if (this._backdrop = document.createElement("div"), this._backdrop.className = dn, o && this._backdrop.classList.add(o), m(this._backdrop).appendTo(document.body), m(this._element).on(ln.CLICK_DISMISS, function(e) {
                            i._ignoreBackdropClick ? i._ignoreBackdropClick = !1 : e.target === e.currentTarget && i._triggerBackdropTransition()
                        }), o && p.reflow(this._backdrop), m(this._backdrop).addClass(mn), !e) return;
                    if (!o) return void e();
                    var s = p.getTransitionDurationFromElement(this._backdrop);
                    m(this._backdrop).one(p.TRANSITION_END, e).emulateTransitionEnd(s)
                } else {
                    !this._isShown && this._backdrop ? (m(this._backdrop).removeClass(mn), t = function() {
                        i._removeBackdrop(), e && e()
                    }, m(this._element).hasClass(fn) ? (n = p.getTransitionDurationFromElement(this._backdrop), m(this._backdrop).one(p.TRANSITION_END, t).emulateTransitionEnd(n)) : t()) : e && e()
                }
            }, e._adjustDialog = function() {
                var e = this._element.scrollHeight > document.documentElement.clientHeight;
                !this._isBodyOverflowing && e && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !e && (this._element.style.paddingRight = this._scrollbarWidth + "px")
            }, e._resetAdjustments = function() {
                this._element.style.paddingLeft = "", this._element.style.paddingRight = ""
            }, e._checkScrollbar = function() {
                var e = document.body.getBoundingClientRect();
                this._isBodyOverflowing = e.left + e.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth()
            }, e._setScrollbar = function() {
                var e, t, n, i, o = this;
                this._isBodyOverflowing && (e = [].slice.call(document.querySelectorAll(bn)), t = [].slice.call(document.querySelectorAll(En)), m(e).each(function(e, t) {
                    var n = t.style.paddingRight,
                        i = m(t).css("padding-right");
                    m(t).data("padding-right", n).css("padding-right", parseFloat(i) + o._scrollbarWidth + "px")
                }), m(t).each(function(e, t) {
                    var n = t.style.marginRight,
                        i = m(t).css("margin-right");
                    m(t).data("margin-right", n).css("margin-right", parseFloat(i) - o._scrollbarWidth + "px")
                }), n = document.body.style.paddingRight, i = m(document.body).css("padding-right"), m(document.body).data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px")), m(document.body).addClass(hn)
            }, e._resetScrollbar = function() {
                var e = [].slice.call(document.querySelectorAll(bn));
                m(e).each(function(e, t) {
                    var n = m(t).data("padding-right");
                    m(t).removeData("padding-right"), t.style.paddingRight = n || ""
                });
                var t = [].slice.call(document.querySelectorAll("" + En));
                m(t).each(function(e, t) {
                    var n = m(t).data("margin-right");
                    void 0 !== n && m(t).css("margin-right", n).removeData("margin-right")
                });
                var n = m(document.body).data("padding-right");
                m(document.body).removeData("padding-right"), document.body.style.paddingRight = n || ""
            }, e._getScrollbarWidth = function() {
                var e = document.createElement("div");
                e.className = un, document.body.appendChild(e);
                var t = e.getBoundingClientRect().width - e.clientWidth;
                return document.body.removeChild(e), t
            }, o._jQueryInterface = function(n, i) {
                return this.each(function() {
                    var e = m(this).data(nn),
                        t = l({}, rn, {}, m(this).data(), {}, "object" == typeof n && n ? n : {});
                    if (e || (e = new o(this, t), m(this).data(nn, e)), "string" == typeof n) {
                        if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                        e[n](i)
                    } else t.show && e.show(i)
                })
            }, r(o, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return rn
                }
            }]), o
        }();
    m(document).on(ln.CLICK_DATA_API, vn, function(e) {
        var t, n = this,
            i = p.getSelectorFromElement(this);
        i && (t = document.querySelector(i));
        var o = m(t).data(nn) ? "toggle" : l({}, m(t).data(), {}, m(this).data());
        "A" !== this.tagName && "AREA" !== this.tagName || e.preventDefault();
        var s = m(t).one(ln.SHOW, function(e) {
            e.isDefaultPrevented() || s.one(ln.HIDDEN, function() {
                m(n).is(":visible") && n.focus()
            })
        });
        wn._jQueryInterface.call(m(t), o, this)
    }), m.fn[tn] = wn._jQueryInterface, m.fn[tn].Constructor = wn, m.fn[tn].noConflict = function() {
        return m.fn[tn] = sn, wn._jQueryInterface
    };
    var Cn = ["background", "cite", "href", "itemtype", "longdesc", "poster", "src", "xlink:href"],
        Tn = {
            "*": ["class", "dir", "id", "lang", "role", /^aria-[\w-]*$/i],
            a: ["target", "href", "title", "rel"],
            area: [],
            b: [],
            br: [],
            col: [],
            code: [],
            div: [],
            em: [],
            hr: [],
            h1: [],
            h2: [],
            h3: [],
            h4: [],
            h5: [],
            h6: [],
            i: [],
            img: ["src", "alt", "title", "width", "height"],
            li: [],
            ol: [],
            p: [],
            pre: [],
            s: [],
            small: [],
            span: [],
            sub: [],
            sup: [],
            strong: [],
            u: [],
            ul: []
        },
        Sn = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi,
        Nn = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

    function Dn(e, s, t) {
        if (0 === e.length) return e;
        if (t && "function" == typeof t) return t(e);
        for (var n = (new window.DOMParser).parseFromString(e, "text/html"), r = Object.keys(s), a = [].slice.call(n.body.querySelectorAll("*")), i = function(e) {
                var t = a[e],
                    n = t.nodeName.toLowerCase();
                if (-1 === r.indexOf(t.nodeName.toLowerCase())) return t.parentNode.removeChild(t), "continue";
                var i = [].slice.call(t.attributes),
                    o = [].concat(s["*"] || [], s[n] || []);
                i.forEach(function(e) {
                    ! function(e, t) {
                        var n = e.nodeName.toLowerCase();
                        if (-1 !== t.indexOf(n)) return -1 === Cn.indexOf(n) || Boolean(e.nodeValue.match(Sn) || e.nodeValue.match(Nn));
                        for (var i = t.filter(function(e) {
                                return e instanceof RegExp
                            }), o = 0, s = i.length; o < s; o++)
                            if (n.match(i[o])) return 1
                    }(e, o) && t.removeAttribute(e.nodeName)
                })
            }, o = 0, l = a.length; o < l; o++) i(o);
        return n.body.innerHTML
    }
    var In = "tooltip",
        An = "bs.tooltip",
        Ln = "." + An,
        On = m.fn[In],
        kn = "bs-tooltip",
        jn = new RegExp("(^|\\s)" + kn + "\\S+", "g"),
        xn = ["sanitize", "whiteList", "sanitizeFn"],
        Pn = {
            animation: "boolean",
            template: "string",
            title: "(string|element|function)",
            trigger: "string",
            delay: "(number|object)",
            html: "boolean",
            selector: "(string|boolean)",
            placement: "(string|function)",
            offset: "(number|string|function)",
            container: "(string|element|boolean)",
            fallbackPlacement: "(string|array)",
            boundary: "(string|element)",
            sanitize: "boolean",
            sanitizeFn: "(null|function)",
            whiteList: "object",
            popperConfig: "(null|object)"
        },
        Bn = {
            AUTO: "auto",
            TOP: "top",
            RIGHT: "right",
            BOTTOM: "bottom",
            LEFT: "left"
        },
        Hn = {
            animation: !0,
            template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
            trigger: "hover focus",
            title: "",
            delay: 0,
            html: !1,
            selector: !1,
            placement: "top",
            offset: 0,
            container: !1,
            fallbackPlacement: "flip",
            boundary: "scrollParent",
            sanitize: !0,
            sanitizeFn: null,
            whiteList: Tn,
            popperConfig: null
        },
        Mn = "show",
        Rn = "out",
        Fn = {
            HIDE: "hide" + Ln,
            HIDDEN: "hidden" + Ln,
            SHOW: "show" + Ln,
            SHOWN: "shown" + Ln,
            INSERTED: "inserted" + Ln,
            CLICK: "click" + Ln,
            FOCUSIN: "focusin" + Ln,
            FOCUSOUT: "focusout" + Ln,
            MOUSEENTER: "mouseenter" + Ln,
            MOUSELEAVE: "mouseleave" + Ln
        },
        qn = "fade",
        Wn = "show",
        Un = ".tooltip-inner",
        Kn = ".arrow",
        Qn = "hover",
        Vn = "focus",
        zn = "click",
        Yn = "manual",
        Xn = function() {
            function i(e, t) {
                if (void 0 === St) throw new TypeError("Bootstrap's tooltips require Popper.js (https://popper.js.org/)");
                this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = e, this.config = this._getConfig(t), this.tip = null, this._setListeners()
            }
            var e = i.prototype;
            return e.enable = function() {
                this._isEnabled = !0
            }, e.disable = function() {
                this._isEnabled = !1
            }, e.toggleEnabled = function() {
                this._isEnabled = !this._isEnabled
            }, e.toggle = function(e) {
                if (this._isEnabled)
                    if (e) {
                        var t = this.constructor.DATA_KEY,
                            n = m(e.currentTarget).data(t);
                        n || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), m(e.currentTarget).data(t, n)), n._activeTrigger.click = !n._activeTrigger.click, n._isWithActiveTrigger() ? n._enter(null, n) : n._leave(null, n)
                    } else {
                        if (m(this.getTipElement()).hasClass(Wn)) return void this._leave(null, this);
                        this._enter(null, this)
                    }
            }, e.dispose = function() {
                clearTimeout(this._timeout), m.removeData(this.element, this.constructor.DATA_KEY), m(this.element).off(this.constructor.EVENT_KEY), m(this.element).closest(".modal").off("hide.bs.modal", this._hideModalHandler), this.tip && m(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null
            }, e.show = function() {
                var t = this;
                if ("none" === m(this.element).css("display")) throw new Error("Please use show on visible elements");
                var e = m.Event(this.constructor.Event.SHOW);
                if (this.isWithContent() && this._isEnabled) {
                    m(this.element).trigger(e);
                    var n = p.findShadowRoot(this.element),
                        i = m.contains(null !== n ? n : this.element.ownerDocument.documentElement, this.element);
                    if (e.isDefaultPrevented() || !i) return;
                    var o = this.getTipElement(),
                        s = p.getUID(this.constructor.NAME);
                    o.setAttribute("id", s), this.element.setAttribute("aria-describedby", s), this.setContent(), this.config.animation && m(o).addClass(qn);
                    var r = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,
                        a = this._getAttachment(r);
                    this.addAttachmentClass(a);
                    var l = this._getContainer();
                    m(o).data(this.constructor.DATA_KEY, this), m.contains(this.element.ownerDocument.documentElement, this.tip) || m(o).appendTo(l), m(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new St(this.element, o, this._getPopperConfig(a)), m(o).addClass(Wn), "ontouchstart" in document.documentElement && m(document.body).children().on("mouseover", null, m.noop);
                    var c, u = function() {
                        t.config.animation && t._fixTransition();
                        var e = t._hoverState;
                        t._hoverState = null, m(t.element).trigger(t.constructor.Event.SHOWN), e === Rn && t._leave(null, t)
                    };
                    m(this.tip).hasClass(qn) ? (c = p.getTransitionDurationFromElement(this.tip), m(this.tip).one(p.TRANSITION_END, u).emulateTransitionEnd(c)) : u()
                }
            }, e.hide = function(e) {
                function t() {
                    i._hoverState !== Mn && o.parentNode && o.parentNode.removeChild(o), i._cleanTipClass(), i.element.removeAttribute("aria-describedby"), m(i.element).trigger(i.constructor.Event.HIDDEN), null !== i._popper && i._popper.destroy(), e && e()
                }
                var n, i = this,
                    o = this.getTipElement(),
                    s = m.Event(this.constructor.Event.HIDE);
                m(this.element).trigger(s), s.isDefaultPrevented() || (m(o).removeClass(Wn), "ontouchstart" in document.documentElement && m(document.body).children().off("mouseover", null, m.noop), this._activeTrigger[zn] = !1, this._activeTrigger[Vn] = !1, this._activeTrigger[Qn] = !1, m(this.tip).hasClass(qn) ? (n = p.getTransitionDurationFromElement(o), m(o).one(p.TRANSITION_END, t).emulateTransitionEnd(n)) : t(), this._hoverState = "")
            }, e.update = function() {
                null !== this._popper && this._popper.scheduleUpdate()
            }, e.isWithContent = function() {
                return Boolean(this.getTitle())
            }, e.addAttachmentClass = function(e) {
                m(this.getTipElement()).addClass(kn + "-" + e)
            }, e.getTipElement = function() {
                return this.tip = this.tip || m(this.config.template)[0], this.tip
            }, e.setContent = function() {
                var e = this.getTipElement();
                this.setElementContent(m(e.querySelectorAll(Un)), this.getTitle()), m(e).removeClass(qn + " " + Wn)
            }, e.setElementContent = function(e, t) {
                "object" != typeof t || !t.nodeType && !t.jquery ? this.config.html ? (this.config.sanitize && (t = Dn(t, this.config.whiteList, this.config.sanitizeFn)), e.html(t)) : e.text(t) : this.config.html ? m(t).parent().is(e) || e.empty().append(t) : e.text(m(t).text())
            }, e.getTitle = function() {
                return this.element.getAttribute("data-original-title") || ("function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title)
            }, e._getPopperConfig = function(e) {
                var t = this;
                return l({}, {
                    placement: e,
                    modifiers: {
                        offset: this._getOffset(),
                        flip: {
                            behavior: this.config.fallbackPlacement
                        },
                        arrow: {
                            element: Kn
                        },
                        preventOverflow: {
                            boundariesElement: this.config.boundary
                        }
                    },
                    onCreate: function(e) {
                        e.originalPlacement !== e.placement && t._handlePopperPlacementChange(e)
                    },
                    onUpdate: function(e) {
                        return t._handlePopperPlacementChange(e)
                    }
                }, {}, this.config.popperConfig)
            }, e._getOffset = function() {
                var t = this,
                    e = {};
                return "function" == typeof this.config.offset ? e.fn = function(e) {
                    return e.offsets = l({}, e.offsets, {}, t.config.offset(e.offsets, t.element) || {}), e
                } : e.offset = this.config.offset, e
            }, e._getContainer = function() {
                return !1 === this.config.container ? document.body : p.isElement(this.config.container) ? m(this.config.container) : m(document).find(this.config.container)
            }, e._getAttachment = function(e) {
                return Bn[e.toUpperCase()]
            }, e._setListeners = function() {
                var i = this;
                this.config.trigger.split(" ").forEach(function(e) {
                    var t, n;
                    "click" === e ? m(i.element).on(i.constructor.Event.CLICK, i.config.selector, function(e) {
                        return i.toggle(e)
                    }) : e !== Yn && (t = e === Qn ? i.constructor.Event.MOUSEENTER : i.constructor.Event.FOCUSIN, n = e === Qn ? i.constructor.Event.MOUSELEAVE : i.constructor.Event.FOCUSOUT, m(i.element).on(t, i.config.selector, function(e) {
                        return i._enter(e)
                    }).on(n, i.config.selector, function(e) {
                        return i._leave(e)
                    }))
                }), this._hideModalHandler = function() {
                    i.element && i.hide()
                }, m(this.element).closest(".modal").on("hide.bs.modal", this._hideModalHandler), this.config.selector ? this.config = l({}, this.config, {
                    trigger: "manual",
                    selector: ""
                }) : this._fixTitle()
            }, e._fixTitle = function() {
                var e = typeof this.element.getAttribute("data-original-title");
                !this.element.getAttribute("title") && "string" == e || (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""))
            }, e._enter = function(e, t) {
                var n = this.constructor.DATA_KEY;
                (t = t || m(e.currentTarget).data(n)) || (t = new this.constructor(e.currentTarget, this._getDelegateConfig()), m(e.currentTarget).data(n, t)), e && (t._activeTrigger["focusin" === e.type ? Vn : Qn] = !0), m(t.getTipElement()).hasClass(Wn) || t._hoverState === Mn ? t._hoverState = Mn : (clearTimeout(t._timeout), t._hoverState = Mn, t.config.delay && t.config.delay.show ? t._timeout = setTimeout(function() {
                    t._hoverState === Mn && t.show()
                }, t.config.delay.show) : t.show())
            }, e._leave = function(e, t) {
                var n = this.constructor.DATA_KEY;
                (t = t || m(e.currentTarget).data(n)) || (t = new this.constructor(e.currentTarget, this._getDelegateConfig()), m(e.currentTarget).data(n, t)), e && (t._activeTrigger["focusout" === e.type ? Vn : Qn] = !1), t._isWithActiveTrigger() || (clearTimeout(t._timeout), t._hoverState = Rn, t.config.delay && t.config.delay.hide ? t._timeout = setTimeout(function() {
                    t._hoverState === Rn && t.hide()
                }, t.config.delay.hide) : t.hide())
            }, e._isWithActiveTrigger = function() {
                for (var e in this._activeTrigger)
                    if (this._activeTrigger[e]) return !0;
                return !1
            }, e._getConfig = function(e) {
                var t = m(this.element).data();
                return Object.keys(t).forEach(function(e) {
                    -1 !== xn.indexOf(e) && delete t[e]
                }), "number" == typeof(e = l({}, this.constructor.Default, {}, t, {}, "object" == typeof e && e ? e : {})).delay && (e.delay = {
                    show: e.delay,
                    hide: e.delay
                }), "number" == typeof e.title && (e.title = e.title.toString()), "number" == typeof e.content && (e.content = e.content.toString()), p.typeCheckConfig(In, e, this.constructor.DefaultType), e.sanitize && (e.template = Dn(e.template, e.whiteList, e.sanitizeFn)), e
            }, e._getDelegateConfig = function() {
                var e = {};
                if (this.config)
                    for (var t in this.config) this.constructor.Default[t] !== this.config[t] && (e[t] = this.config[t]);
                return e
            }, e._cleanTipClass = function() {
                var e = m(this.getTipElement()),
                    t = e.attr("class").match(jn);
                null !== t && t.length && e.removeClass(t.join(""))
            }, e._handlePopperPlacementChange = function(e) {
                var t = e.instance;
                this.tip = t.popper, this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(e.placement))
            }, e._fixTransition = function() {
                var e = this.getTipElement(),
                    t = this.config.animation;
                null === e.getAttribute("x-placement") && (m(e).removeClass(qn), this.config.animation = !1, this.hide(), this.show(), this.config.animation = t)
            }, i._jQueryInterface = function(n) {
                return this.each(function() {
                    var e = m(this).data(An),
                        t = "object" == typeof n && n;
                    if ((e || !/dispose|hide/.test(n)) && (e || (e = new i(this, t), m(this).data(An, e)), "string" == typeof n)) {
                        if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                        e[n]()
                    }
                })
            }, r(i, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return Hn
                }
            }, {
                key: "NAME",
                get: function() {
                    return In
                }
            }, {
                key: "DATA_KEY",
                get: function() {
                    return An
                }
            }, {
                key: "Event",
                get: function() {
                    return Fn
                }
            }, {
                key: "EVENT_KEY",
                get: function() {
                    return Ln
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return Pn
                }
            }]), i
        }();
    m.fn[In] = Xn._jQueryInterface, m.fn[In].Constructor = Xn, m.fn[In].noConflict = function() {
        return m.fn[In] = On, Xn._jQueryInterface
    };
    var Gn = "popover",
        Zn = "bs.popover",
        $n = "." + Zn,
        Jn = m.fn[Gn],
        ei = "bs-popover",
        ti = new RegExp("(^|\\s)" + ei + "\\S+", "g"),
        ni = l({}, Xn.Default, {
            placement: "right",
            trigger: "click",
            content: "",
            template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
        }),
        ii = l({}, Xn.DefaultType, {
            content: "(string|element|function)"
        }),
        oi = "fade",
        si = "show",
        ri = ".popover-header",
        ai = ".popover-body",
        li = {
            HIDE: "hide" + $n,
            HIDDEN: "hidden" + $n,
            SHOW: "show" + $n,
            SHOWN: "shown" + $n,
            INSERTED: "inserted" + $n,
            CLICK: "click" + $n,
            FOCUSIN: "focusin" + $n,
            FOCUSOUT: "focusout" + $n,
            MOUSEENTER: "mouseenter" + $n,
            MOUSELEAVE: "mouseleave" + $n
        },
        ci = function(e) {
            var t, n;

            function i() {
                return e.apply(this, arguments) || this
            }
            n = e, (t = i).prototype = Object.create(n.prototype), (t.prototype.constructor = t).__proto__ = n;
            var o = i.prototype;
            return o.isWithContent = function() {
                return this.getTitle() || this._getContent()
            }, o.addAttachmentClass = function(e) {
                m(this.getTipElement()).addClass(ei + "-" + e)
            }, o.getTipElement = function() {
                return this.tip = this.tip || m(this.config.template)[0], this.tip
            }, o.setContent = function() {
                var e = m(this.getTipElement());
                this.setElementContent(e.find(ri), this.getTitle());
                var t = this._getContent();
                "function" == typeof t && (t = t.call(this.element)), this.setElementContent(e.find(ai), t), e.removeClass(oi + " " + si)
            }, o._getContent = function() {
                return this.element.getAttribute("data-content") || this.config.content
            }, o._cleanTipClass = function() {
                var e = m(this.getTipElement()),
                    t = e.attr("class").match(ti);
                null !== t && 0 < t.length && e.removeClass(t.join(""))
            }, i._jQueryInterface = function(n) {
                return this.each(function() {
                    var e = m(this).data(Zn),
                        t = "object" == typeof n ? n : null;
                    if ((e || !/dispose|hide/.test(n)) && (e || (e = new i(this, t), m(this).data(Zn, e)), "string" == typeof n)) {
                        if (void 0 === e[n]) throw new TypeError('No method named "' + n + '"');
                        e[n]()
                    }
                })
            }, r(i, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return ni
                }
            }, {
                key: "NAME",
                get: function() {
                    return Gn
                }
            }, {
                key: "DATA_KEY",
                get: function() {
                    return Zn
                }
            }, {
                key: "Event",
                get: function() {
                    return li
                }
            }, {
                key: "EVENT_KEY",
                get: function() {
                    return $n
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return ii
                }
            }]), i
        }(Xn);
    m.fn[Gn] = ci._jQueryInterface, m.fn[Gn].Constructor = ci, m.fn[Gn].noConflict = function() {
        return m.fn[Gn] = Jn, ci._jQueryInterface
    };
    var ui = "scrollspy",
        di = "bs.scrollspy",
        hi = "." + di,
        fi = m.fn[ui],
        mi = {
            offset: 10,
            method: "auto",
            target: ""
        },
        pi = {
            offset: "number",
            method: "string",
            target: "(string|element)"
        },
        gi = {
            ACTIVATE: "activate" + hi,
            SCROLL: "scroll" + hi,
            LOAD_DATA_API: "load" + hi + ".data-api"
        },
        _i = "dropdown-item",
        vi = "active",
        yi = '[data-spy="scroll"]',
        bi = ".nav, .list-group",
        Ei = ".nav-link",
        wi = ".nav-item",
        Ci = ".list-group-item",
        Ti = ".dropdown",
        Si = ".dropdown-item",
        Ni = ".dropdown-toggle",
        Di = "offset",
        Ii = "position",
        Ai = function() {
            function n(e, t) {
                var n = this;
                this._element = e, this._scrollElement = "BODY" === e.tagName ? window : e, this._config = this._getConfig(t), this._selector = this._config.target + " " + Ei + "," + this._config.target + " " + Ci + "," + this._config.target + " " + Si, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, m(this._scrollElement).on(gi.SCROLL, function(e) {
                    return n._process(e)
                }), this.refresh(), this._process()
            }
            var e = n.prototype;
            return e.refresh = function() {
                var t = this,
                    e = this._scrollElement === this._scrollElement.window ? Di : Ii,
                    o = "auto" === this._config.method ? e : this._config.method,
                    s = o === Ii ? this._getScrollTop() : 0;
                this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), [].slice.call(document.querySelectorAll(this._selector)).map(function(e) {
                    var t, n = p.getSelectorFromElement(e);
                    if (n && (t = document.querySelector(n)), t) {
                        var i = t.getBoundingClientRect();
                        if (i.width || i.height) return [m(t)[o]().top + s, n]
                    }
                    return null
                }).filter(function(e) {
                    return e
                }).sort(function(e, t) {
                    return e[0] - t[0]
                }).forEach(function(e) {
                    t._offsets.push(e[0]), t._targets.push(e[1])
                })
            }, e.dispose = function() {
                m.removeData(this._element, di), m(this._scrollElement).off(hi), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null
            }, e._getConfig = function(e) {
                var t;
                return "string" != typeof(e = l({}, mi, {}, "object" == typeof e && e ? e : {})).target && ((t = m(e.target).attr("id")) || (t = p.getUID(ui), m(e.target).attr("id", t)), e.target = "#" + t), p.typeCheckConfig(ui, e, pi), e
            }, e._getScrollTop = function() {
                return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop
            }, e._getScrollHeight = function() {
                return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight)
            }, e._getOffsetHeight = function() {
                return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height
            }, e._process = function() {
                var e = this._getScrollTop() + this._config.offset,
                    t = this._getScrollHeight(),
                    n = this._config.offset + t - this._getOffsetHeight();
                if (this._scrollHeight !== t && this.refresh(), n <= e) {
                    var i = this._targets[this._targets.length - 1];
                    this._activeTarget !== i && this._activate(i)
                } else {
                    if (this._activeTarget && e < this._offsets[0] && 0 < this._offsets[0]) return this._activeTarget = null, void this._clear();
                    for (var o = this._offsets.length; o--;) {
                        this._activeTarget !== this._targets[o] && e >= this._offsets[o] && (void 0 === this._offsets[o + 1] || e < this._offsets[o + 1]) && this._activate(this._targets[o])
                    }
                }
            }, e._activate = function(t) {
                this._activeTarget = t, this._clear();
                var e = this._selector.split(",").map(function(e) {
                        return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]'
                    }),
                    n = m([].slice.call(document.querySelectorAll(e.join(","))));
                n.hasClass(_i) ? (n.closest(Ti).find(Ni).addClass(vi), n.addClass(vi)) : (n.addClass(vi), n.parents(bi).prev(Ei + ", " + Ci).addClass(vi), n.parents(bi).prev(wi).children(Ei).addClass(vi)), m(this._scrollElement).trigger(gi.ACTIVATE, {
                    relatedTarget: t
                })
            }, e._clear = function() {
                [].slice.call(document.querySelectorAll(this._selector)).filter(function(e) {
                    return e.classList.contains(vi)
                }).forEach(function(e) {
                    return e.classList.remove(vi)
                })
            }, n._jQueryInterface = function(t) {
                return this.each(function() {
                    var e = m(this).data(di);
                    if (e || (e = new n(this, "object" == typeof t && t), m(this).data(di, e)), "string" == typeof t) {
                        if (void 0 === e[t]) throw new TypeError('No method named "' + t + '"');
                        e[t]()
                    }
                })
            }, r(n, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "Default",
                get: function() {
                    return mi
                }
            }]), n
        }();
    m(window).on(gi.LOAD_DATA_API, function() {
        for (var e = [].slice.call(document.querySelectorAll(yi)), t = e.length; t--;) {
            var n = m(e[t]);
            Ai._jQueryInterface.call(n, n.data())
        }
    }), m.fn[ui] = Ai._jQueryInterface, m.fn[ui].Constructor = Ai, m.fn[ui].noConflict = function() {
        return m.fn[ui] = fi, Ai._jQueryInterface
    };
    var Li = "bs.tab",
        Oi = "." + Li,
        ki = m.fn.tab,
        ji = {
            HIDE: "hide" + Oi,
            HIDDEN: "hidden" + Oi,
            SHOW: "show" + Oi,
            SHOWN: "shown" + Oi,
            CLICK_DATA_API: "click" + Oi + ".data-api"
        },
        xi = "dropdown-menu",
        Pi = "active",
        Bi = "disabled",
        Hi = "fade",
        Mi = "show",
        Ri = ".dropdown",
        Fi = ".nav, .list-group",
        qi = ".active",
        Wi = "> li > .active",
        Ui = '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
        Ki = ".dropdown-toggle",
        Qi = "> .dropdown-menu .active",
        Vi = function() {
            function i(e) {
                this._element = e
            }
            var e = i.prototype;
            return e.show = function() {
                var e, t, n, i, o, s, r, a, l = this;
                this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && m(this._element).hasClass(Pi) || m(this._element).hasClass(Bi) || (t = m(this._element).closest(Fi)[0], n = p.getSelectorFromElement(this._element), t && (i = "UL" === t.nodeName || "OL" === t.nodeName ? Wi : qi, o = (o = m.makeArray(m(t).find(i)))[o.length - 1]), s = m.Event(ji.HIDE, {
                    relatedTarget: this._element
                }), r = m.Event(ji.SHOW, {
                    relatedTarget: o
                }), o && m(o).trigger(s), m(this._element).trigger(r), r.isDefaultPrevented() || s.isDefaultPrevented() || (n && (e = document.querySelector(n)), this._activate(this._element, t), a = function() {
                    var e = m.Event(ji.HIDDEN, {
                            relatedTarget: l._element
                        }),
                        t = m.Event(ji.SHOWN, {
                            relatedTarget: o
                        });
                    m(o).trigger(e), m(l._element).trigger(t)
                }, e ? this._activate(e, e.parentNode, a) : a()))
            }, e.dispose = function() {
                m.removeData(this._element, Li), this._element = null
            }, e._activate = function(e, t, n) {
                function i() {
                    return s._transitionComplete(e, r, n)
                }
                var o, s = this,
                    r = (!t || "UL" !== t.nodeName && "OL" !== t.nodeName ? m(t).children(qi) : m(t).find(Wi))[0],
                    a = n && r && m(r).hasClass(Hi);
                r && a ? (o = p.getTransitionDurationFromElement(r), m(r).removeClass(Mi).one(p.TRANSITION_END, i).emulateTransitionEnd(o)) : i()
            }, e._transitionComplete = function(e, t, n) {
                var i, o, s;
                t && (m(t).removeClass(Pi), (i = m(t.parentNode).find(Qi)[0]) && m(i).removeClass(Pi), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !1)), m(e).addClass(Pi), "tab" === e.getAttribute("role") && e.setAttribute("aria-selected", !0), p.reflow(e), e.classList.contains(Hi) && e.classList.add(Mi), e.parentNode && m(e.parentNode).hasClass(xi) && ((o = m(e).closest(Ri)[0]) && (s = [].slice.call(o.querySelectorAll(Ki)), m(s).addClass(Pi)), e.setAttribute("aria-expanded", !0)), n && n()
            }, i._jQueryInterface = function(n) {
                return this.each(function() {
                    var e = m(this),
                        t = e.data(Li);
                    if (t || (t = new i(this), e.data(Li, t)), "string" == typeof n) {
                        if (void 0 === t[n]) throw new TypeError('No method named "' + n + '"');
                        t[n]()
                    }
                })
            }, r(i, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }]), i
        }();
    m(document).on(ji.CLICK_DATA_API, Ui, function(e) {
        e.preventDefault(), Vi._jQueryInterface.call(m(this), "show")
    }), m.fn.tab = Vi._jQueryInterface, m.fn.tab.Constructor = Vi, m.fn.tab.noConflict = function() {
        return m.fn.tab = ki, Vi._jQueryInterface
    };
    var zi = "toast",
        Yi = "bs.toast",
        Xi = "." + Yi,
        Gi = m.fn[zi],
        Zi = {
            CLICK_DISMISS: "click.dismiss" + Xi,
            HIDE: "hide" + Xi,
            HIDDEN: "hidden" + Xi,
            SHOW: "show" + Xi,
            SHOWN: "shown" + Xi
        },
        $i = "fade",
        Ji = "hide",
        eo = "show",
        to = "showing",
        no = {
            animation: "boolean",
            autohide: "boolean",
            delay: "number"
        },
        io = {
            animation: !0,
            autohide: !0,
            delay: 500
        },
        oo = '[data-dismiss="toast"]',
        so = function() {
            function i(e, t) {
                this._element = e, this._config = this._getConfig(t), this._timeout = null, this._setListeners()
            }
            var e = i.prototype;
            return e.show = function() {
                var e, t, n = this,
                    i = m.Event(Zi.SHOW);
                m(this._element).trigger(i), i.isDefaultPrevented() || (this._config.animation && this._element.classList.add($i), e = function() {
                    n._element.classList.remove(to), n._element.classList.add(eo), m(n._element).trigger(Zi.SHOWN), n._config.autohide && (n._timeout = setTimeout(function() {
                        n.hide()
                    }, n._config.delay))
                }, this._element.classList.remove(Ji), p.reflow(this._element), this._element.classList.add(to), this._config.animation ? (t = p.getTransitionDurationFromElement(this._element), m(this._element).one(p.TRANSITION_END, e).emulateTransitionEnd(t)) : e())
            }, e.hide = function() {
                var e;
                this._element.classList.contains(eo) && (e = m.Event(Zi.HIDE), m(this._element).trigger(e), e.isDefaultPrevented() || this._close())
            }, e.dispose = function() {
                clearTimeout(this._timeout), this._timeout = null, this._element.classList.contains(eo) && this._element.classList.remove(eo), m(this._element).off(Zi.CLICK_DISMISS), m.removeData(this._element, Yi), this._element = null, this._config = null
            }, e._getConfig = function(e) {
                return e = l({}, io, {}, m(this._element).data(), {}, "object" == typeof e && e ? e : {}), p.typeCheckConfig(zi, e, this.constructor.DefaultType), e
            }, e._setListeners = function() {
                var e = this;
                m(this._element).on(Zi.CLICK_DISMISS, oo, function() {
                    return e.hide()
                })
            }, e._close = function() {
                function e() {
                    n._element.classList.add(Ji), m(n._element).trigger(Zi.HIDDEN)
                }
                var t, n = this;
                this._element.classList.remove(eo), this._config.animation ? (t = p.getTransitionDurationFromElement(this._element), m(this._element).one(p.TRANSITION_END, e).emulateTransitionEnd(t)) : e()
            }, i._jQueryInterface = function(n) {
                return this.each(function() {
                    var e = m(this),
                        t = e.data(Yi);
                    if (t || (t = new i(this, "object" == typeof n && n), e.data(Yi, t)), "string" == typeof n) {
                        if (void 0 === t[n]) throw new TypeError('No method named "' + n + '"');
                        t[n](this)
                    }
                })
            }, r(i, null, [{
                key: "VERSION",
                get: function() {
                    return "4.4.1"
                }
            }, {
                key: "DefaultType",
                get: function() {
                    return no
                }
            }, {
                key: "Default",
                get: function() {
                    return io
                }
            }]), i
        }();
    m.fn[zi] = so._jQueryInterface, m.fn[zi].Constructor = so, m.fn[zi].noConflict = function() {
        return m.fn[zi] = Gi, so._jQueryInterface
    }, e.Alert = _, e.Button = x, e.Carousel = ue, e.Collapse = Ne, e.Dropdown = en, e.Modal = wn, e.Popover = ci, e.Scrollspy = Ai, e.Tab = Vi, e.Toast = so, e.Tooltip = Xn, e.Util = p, Object.defineProperty(e, "__esModule", {
        value: !0
    })
}),
function(e, t) {
    "function" == typeof define && define.amd ? define([], t) : "object" === ("undefined" == typeof exports ? "undefined" : _typeof(exports)) ? module.exports = t() : e.InstagramFeed = t()
}(this, function() {
    var t = {
            host: "https://www.instagram.com/",
            username: "",
            tag: "",
            container: "",
            display_profile: !0,
            display_biography: !0,
            display_gallery: !0,
            display_igtv: !1,
            get_data: !1,
            callback: null,
            styling: !0,
            items: 8,
            items_per_row: 4,
            margin: .5,
            image_size: 640
        },
        f = {
            150: 0,
            240: 1,
            320: 2,
            480: 3,
            640: 4
        },
        m = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#x2F;",
            "`": "&#x60;",
            "=": "&#x3D;"
        };
    return function(e) {
        this.options = Object.assign({}, t), this.options = Object.assign(this.options, e), this.is_tag = "" == this.options.username, this.valid = !0, "" == this.options.username && "" == this.options.tag ? (console.error("InstagramFeed: Error, no username or tag defined."), this.valid = !1) : this.options.get_data || "" != this.options.container ? this.options.get_data && "function" != typeof this.options.callback && (console.error("InstagramFeed: Error, invalid or undefined callback for get_data"), this.valid = !1) : (console.error("InstagramFeed: Error, no container found."), this.valid = !1), this.get = function(t) {
            var e = this.is_tag ? this.options.host + "explore/tags/" + this.options.tag + "/" : this.options.host + this.options.username + "/",
                n = new XMLHttpRequest,
                i = this;
            n.onload = function() {
                if (4 === n.readyState)
                    if (200 === n.status) {
                        var e = n.responseText.split("window._sharedData = ")[1].split("<\/script>")[0];
                        if (void 0 === (e = (e = JSON.parse(e.substr(0, e.length - 1))).entry_data.ProfilePage || e.entry_data.TagPage)) return void console.error("Instagram Feed: It looks like YOUR network has been temporary banned because of too many requests. See https://github.com/jsanahuja/jquery.instagramFeed/issues/25");
                        e = e[0].graphql.user || e[0].graphql.hashtag, t(e, i)
                    } else console.error("InstagramFeed: Request error. Response: " + n.statusText)
            }, n.open("GET", e, !0), n.send()
        }, this.parse_caption = function(e, t) {
            return void 0 !== e.node.edge_media_to_caption.edges[0] && void 0 !== e.node.edge_media_to_caption.edges[0].node && void 0 !== e.node.edge_media_to_caption.edges[0].node.text && null !== e.node.edge_media_to_caption.edges[0].node.text ? e.node.edge_media_to_caption.edges[0].node.text : void 0 !== e.node.title && null !== e.node.title && 0 != e.node.title.length ? e.node.title : void 0 !== e.node.accessibility_caption && null !== e.node.accessibility_caption && 0 != e.node.accessibility_caption.length ? e.node.accessibility_caption : (this.is_tag ? t.name : t.username) + " image "
        }, this.display = function(e) {
            var t, n;
            n = this.options.styling ? (t = (100 - 2 * this.options.margin * this.options.items_per_row) / this.options.items_per_row, {
                profile_container: " style='text-align:center;'",
                profile_image: " style='border-radius:10em;width:15%;max-width:125px;min-width:50px;'",
                profile_name: " style='font-size:1.2em;'",
                profile_biography: " style='font-size:1em;'",
                gallery_image: " style='margin:" + this.options.margin + "% " + this.options.margin + "%;width:" + t + "%;float:left;'"
            }) : {
                profile_container: "",
                profile_image: "",
                profile_name: "",
                profile_biography: "",
                gallery_image: ""
            };
            var i = "";
            if (this.options.display_profile && (i += "<div class='instagram_profile'" + n.profile_container + ">", i += "<img class='instagram_profile_image' src='" + e.profile_pic_url + "' alt='" + (this.is_tag ? e.name + " tag pic" : e.username + " profile pic") + " profile pic'" + n.profile_image + " />", i += this.is_tag ? "<p class='instagram_tag'" + n.profile_name + "><a href='https://www.instagram.com/explore/tags/" + this.options.tag + "' rel='noopener' target='_blank'>#" + this.options.tag + "</a></p>" : "<p class='instagram_username'" + n.profile_name + ">@" + e.full_name + " (<a href='https://www.instagram.com/" + this.options.username + "' rel='noopener' target='_blank'>@" + this.options.username + "</a>)</p>", !this.is_tag && this.options.display_biography && (i += "<p class='instagram_biography'" + n.profile_biography + ">" + e.biography + "</p>"), i += "</div>"), this.options.display_gallery) {
                var o = void 0 === f[this.options.image_size] ? f[640] : f[this.options.image_size];
                if (void 0 !== e.is_private && !0 === e.is_private) i += "<p class='instagram_private'><strong>This profile is private</strong></p>";
                else {
                    var s = (e.edge_owner_to_timeline_media || e.edge_hashtag_to_media).edges,
                        r = s.length > this.options.items ? this.options.items : s.length;
                    i += "<div class='instagram_gallery'>";
                    for (var a = 0; a < r; a++) {
                        var l, c, u = "https://www.instagram.com/p/" + s[a].node.shortcode,
                            d = this.parse_caption(s[a], e).replace(/[&<>"'`=\/]/g, function(e) {
                                return m[e]
                            });
                        switch (s[a].node.__typename) {
                            case "GraphSidecar":
                                c = "sidecar", l = s[a].node.thumbnail_resources[o].src;
                                break;
                            case "GraphVideo":
                                c = "video", l = s[a].node.thumbnail_src;
                                break;
                            default:
                                c = "image", l = s[a].node.thumbnail_resources[o].src
                        }
                        this.is_tag && (e.username = ""), i += "<a href='" + u + "' class='instagram-" + c + "' title='" + d + "' rel='noopener' target='_blank'>", i += "<img src='" + l + "' alt='" + d + "'" + n.gallery_image + " />", i += "</a>"
                    }
                    i += "</div>"
                }
            }
            if (this.options.display_igtv && void 0 !== e.edge_felix_video_timeline) {
                var h = e.edge_felix_video_timeline.edges,
                    r = h.length > this.options.items ? this.options.items : h.length;
                if (0 < h.length) {
                    i += "<div class='instagram_igtv'>";
                    for (a = 0; a < r; a++) {
                        i += "<a href='" + (u = "https://www.instagram.com/p/" + h[a].node.shortcode) + "' rel='noopener' title='" + (d = this.parse_caption(h[a], e)) + "' target='_blank'>", i += "<img src='" + h[a].node.thumbnail_src + "' alt='" + d + "'" + n.gallery_image + " />", i += "</a>"
                    }
                    i += "</div>"
                }
            }
            this.options.container.innerHTML = i
        }, this.run = function() {
            this.get(function(e, t) {
                t.options.get_data ? t.options.callback(e) : t.display(e)
            })
        }, this.valid && this.run()
    }
}),
function() {
    var e = document.getElementsByClassName("js-subscribe-form");
    [].forEach.call(e, function(r) {
        var a;
        0 < r.getElementsByClassName("js-subscribe-response").length ? a = r.getElementsByClassName("js-subscribe-response")[0] : ((a = document.createElement("DIV")).classList.add("subscribe__response"), r.appendChild(a)), r.addEventListener("submit", function(e) {
            e.preventDefault(), r.classList.remove("subscribe-form-is-invalid"), r.classList.remove("subscribe-form-is-valid");
            var t = this.action.replace("/post?", "/post-json?"),
                n = "",
                i = r.getElementsByTagName("input");
            [].forEach.call(i, function(e) {
                n += "&" + e.name + "=" + encodeURIComponent(e.value)
            });
            var o = document.createElement("script");
            o.src = t + n, document.body.appendChild(o);
            var s = "callback";
            window[s] = function(e) {
                delete window[s], document.body.removeChild(o), a.innerHTML = e.msg.replace(/^\d*\s[-â€”â€“]\s/g, ""), "error" === e.result ? r.classList.add("subscribe-form-is-invalid") : r.classList.add("subscribe-form-is-valid")
            }
        })
    })
}(),
function() {
    var e = document.getElementsByTagName("head")[0];

    function t() {
        var e = window.navigator.userAgent,
            t = e.indexOf("MSIE ");
        if (0 < t) return parseInt(e.substring(t + 5, e.indexOf(".", t)), 10);
        if (0 < e.indexOf("Trident/")) {
            var n = e.indexOf("rv:");
            return parseInt(e.substring(n + 3, e.indexOf(".", n)), 10)
        }
        var i = e.indexOf("Edge/");
        return 0 < i && parseInt(e.substring(i + 5, e.indexOf(".", i)), 10)
    }
    new LazyLoad({
        elements_selector: ".lazy",
        class_loaded: "is-loaded"
    });
    var n = document.getElementsByClassName("js-convert-to-entities");

    function i(e) {
        "" !== e.value ? e.classList.add("has-value") : e.classList.remove("has-value")
    }[].forEach.call(n, function(e) {
        var t = function(e) {
            for (var t = [], n = e.length - 1; 0 <= n; n--) t.unshift(["&#", e[n].charCodeAt(), ";"].join(""));
            return t.join("")
        }(e.innerHTML);
        e.innerHTML = t, hljs.highlightBlock(e), e.style.opacity = "1"
    });
    for (var o = document.getElementsByTagName("input"), s = document.getElementsByTagName("textarea"), r = document.getElementsByTagName("select"), a = [], l = 0; l < o.length; l++) "submit" !== o[l].type && a.push(o[l]);
    for (l = 0; l < s.length; l++) a.push(s[l]);
    for (l = 0; l < r.length; l++) a.push(r[l]);
    [].forEach.call(a, function(e) {
        i(e), e.onblur = function() {
            i(e)
        }
    });

    function c(e) {
        for (var t = [], n = e.getElementsByTagName("input"), i = e.getElementsByTagName("textarea"), o = 0; o < n.length; o++) "submit" !== n[o].type && t.push(n[o]);
        for (var s = 0; s < i.length; s++) t.push(i[s]);
        return t
    }

    function u(e) {
        var t = !0,
            n = e.getElementsByClassName("js-contact-form-response")[0],
            i = c(e);
        return [].forEach.call(i, function(e) {
            e.hasAttribute("required") && "" === e.value ? t = !1 : "email" === e.type && (new RegExp('^(([^<>()[\\]\\.,;:\\s@"]+(\\.[^<>()\\[\\]\\.,;:\\s@"]+)*)|(".+"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$').test(String(e.value)) ? e.classList.remove("contact__input--error") : (t = !1, e.classList.add("contact__input--error")))
        }), t ? (n.innerHTML = "", n.classList.remove("contact__response--success"), n.classList.remove("contact__response--error")) : (n.innerHTML = "Please make sure all the fields are valid.", n.classList.remove("contact__response--success"), n.classList.add("contact__response--error")), t
    }

    function d(o) {
        var e = o.getElementsByClassName("js-contact-form-response")[0],
            t = o.getElementsByClassName("js-contact-form-submit")[0],
            n = "Sending â€¦",
            i = t.value;
        e.classList.remove("contact__response--success"), e.classList.remove("contact__response--error");
        var s, r = u(o);
        o.classList.add("was-validated"), r ? (s = c(o), [].forEach.call(s, function(e) {
            e.disabled = !0
        }), o.classList.add("contact-form-is-submitting"), t.value = n, e.innerHTML = n, setTimeout(function() {
            o.classList.remove("contact-form-is-submitting"), o.classList.add("contact-form-is-valid"), e.innerHTML = "Your message was sent successfully.", e.classList.add("contact__response--success"), setTimeout(function() {
                var e, t, n, i;
                t = c(e = o), n = e.getElementsByClassName("js-contact-form-response")[0], i = e.getElementsByClassName("js-contact-form-submit")[0], e.reset(), [].forEach.call(t, function(e) {
                    e.classList.remove("has-value"), e.disabled = !1
                }), e.classList.remove("contact-form-is-valid"), e.classList.remove("was-validated"), i.blur(), n.innerHTML = "", n.classList.remove("contact__response--success")
            }, 4e3), t.value = i
        }, 3e3)) : (e.innerHTML = "Please make sure all the fields are valid.", e.classList.add("contact__response--error"))
    }
    window.Element && !Element.prototype.closest && (Element.prototype.closest = function(e) {
        var t, n = (this.document || this.ownerDocument).querySelectorAll(e),
            i = this;
        do {
            for (t = n.length; 0 <= --t && n.item(t) !== i;);
        } while (t < 0 && (i = i.parentElement));
        return i
    });
    var h, f = document.getElementsByClassName("js-contact-form")[0];
    !f || (h = f.getElementsByClassName("js-contact-form-submit")[0]) && (h.onclick = function(e) {
        e.preventDefault(), d(f)
    });
    var m, p, g, _, v, y = document.getElementsByClassName("js-contact-input");
    0 < y.length && [].forEach.call(y, function(e) {
            e.oninput = function() {
                f && f.classList.contains("was-validated") && u(f)
            }
        }),
        function() {
            for (var e = document.querySelectorAll("textarea"), t = 0; t < e.length; t++) e[t].addEventListener("paste", i), e[t].addEventListener("input", i), e[t].addEventListener("keyup", i);

            function i(e, t) {
                var n = t || e.target;
                n.style.height = "inherit", n.style.height = n.scrollHeight + "px"
            }

            function n(e) {
                for (var t = document.querySelectorAll("textarea"), n = 0; n < t.length; n++) i(e, t[n])
            }
            window.addEventListener("load", n), window.addEventListener("resize", n)
        }(), 0 < document.getElementsByClassName("js-hero-video-overlap").length && (m = document.getElementsByClassName("js-hero-video-open")[0], p = document.getElementsByClassName("js-hero-video-close")[0], g = document.getElementsByClassName("js-hero-video-overlap-container")[0], _ = document.getElementsByClassName("js-hero-video-overlap-player")[0], v = document.getElementsByClassName("js-hero-video-image")[0], null !== m && (m.onclick = function() {
            g.classList.add("video-is-playing"), g.style.zIndex = "1031", document.body.classList.add("u-no-scroll"), _.controls = !0, setTimeout(function() {
                _.play()
            }, 500)
        }), null !== p && (p.onclick = function() {
            null != v && (v.style.display = "none"), _.controls = !1, _.pause(), g.classList.remove("video-is-playing"), document.body.classList.remove("u-no-scroll"), setTimeout(function() {
                g.style.zIndex = "0"
            }, 500)
        }));
    var b = document.createElement("script");

    function E(e, r, a, t) {
        function n() {
            var t = "",
                n = "",
                n = a ? (t = "data-article-page-mobile", "is-article-visible-mobile") : (t = "data-article-page-desktop", "is-article-visible-desktop");
            if ([].forEach.call(r, function(e) {
                    e.ondragstart = function() {
                        return !1
                    }, e.hasAttribute(t) && (Number(e.getAttribute(t)) === u ? e.classList.add(n) : e.classList.remove(n))
                }), l.getElementsByClassName("is-current")[0].parentNode.classList.remove("active"), l.getElementsByClassName("is-current")[0].classList.remove("is-current"), l.getElementsByClassName("js-page-" + u)[0].parentNode.classList.add("active"), l.getElementsByClassName("js-page-" + u)[0].classList.add("is-current"), 1 === u ? f.parentNode.classList.add("disabled") : 1 < u && f.parentNode.classList.remove("disabled"), u === d ? m.parentNode.classList.add("disabled") : u < d && m.parentNode.classList.remove("disabled"), c.length > h) {
                for (var e = l.getElementsByClassName("js-page-filler"), i = 2; i < d; i++) {
                    l.getElementsByClassName("js-page-" + i)[0].classList.add("is-hidden")
                }[].forEach.call(e, function(e) {
                    e.classList.add("is-hidden")
                });
                var o = h - 3 + (h <= 5 ? 1 : 0),
                    s = d - (h - 4) - (h <= 6 ? 1 : 0);
                if (u <= o) {
                    for (i = 2; i <= o; i++) {
                        l.getElementsByClassName("js-page-" + i)[0].classList.remove("is-hidden")
                    }
                    5 < h && l.getElementsByClassName("js-page-" + (1 + o))[0].classList.remove("is-hidden"), e[1].classList.remove("is-hidden")
                } else if (s <= u) {
                    for (i = s; i < d; i++) {
                        l.getElementsByClassName("js-page-" + i)[0].classList.remove("is-hidden")
                    }
                    6 < h && l.getElementsByClassName("js-page-" + (s - 1))[0].classList.remove("is-hidden"), e[0].classList.remove("is-hidden")
                } else {
                    l.getElementsByClassName("js-page-" + u)[0].classList.remove("is-hidden");
                    for (i = 0; i < Math.ceil((h - 5) / 2); i++) {
                        l.getElementsByClassName("js-page-" + (u + (i + 1)))[0].classList.remove("is-hidden")
                    }
                    for (i = 0; i < Math.ceil((h - 6) / 2); i++) {
                        l.getElementsByClassName("js-page-" + (u - (i + 1)))[0].classList.remove("is-hidden")
                    }[].forEach.call(e, function(e) {
                        e.classList.remove("is-hidden")
                    })
                }
            }
        }
        var l = e.getElementsByClassName("js-pagination")[0],
            c = l.getElementsByClassName("js-page"),
            u = 1,
            d = c.length,
            h = l.getAttribute("data-pagination-labels-max"),
            f = l.getElementsByClassName("js-page-previous")[0],
            m = l.getElementsByClassName("js-page-next")[0];
        [].forEach.call(c, function(e) {
            e.onclick = function() {
                u = Number(this.innerHTML), n()
            }
        }), f.onclick = function() {
            1 < u && (u--, n())
        }, m.onclick = function() {
            u < d && (u++, n())
        };
        var i = 0,
            o = 0,
            s = "is-swiping";
        t.addEventListener("touchstart", function(e) {
            i = e.changedTouches[0].screenX, t.classList.add(s)
        }, !1), t.addEventListener("mousedown", function(e) {
            i = e.screenX, t.classList.add(s)
        }, !1), t.addEventListener("touchend", function(e) {
            o = e.changedTouches[0].screenX, t.classList.remove(s), p()
        }, !1), t.addEventListener("mouseup", function(e) {
            o = e.screenX, t.classList.remove(s), p()
        }, !1), t.addEventListener("dragend", function(e) {
            o = e.screenX, t.classList.remove(s), p()
        }, !1);
        var p = function() {
            10 <= Math.abs(o - i) && (i < o && 1 < u && (u--, n()), o < i && u < d && (u++, n()))
        };
        n()
    }
    b.type = "text/javascript", b.src = "https://cdnjs.cloudflare.com/ajax/libs/Swiper/4.4.6/js/swiper.min.js", 0 < document.getElementsByClassName("js-hero-slideshow").length && (e.appendChild(b), b.onload = function() {
        var e = document.getElementsByClassName("js-hero-slideshow-button-next")[0],
            t = document.getElementsByClassName("js-hero-slideshow-button-previous")[0],
            n = document.getElementsByClassName("js-hero-slideshow-progress-bar")[0],
            i = new Swiper(".js-hero-slideshow", {
                preloadImages: !1,
                lazy: !0,
                mode: "horizontal",
                loop: !1,
                effect: "fade",
                touchRatio: .8,
                grabCursor: !0,
                fadeEffect: {
                    crossFade: !0
                },
                keyboard: {
                    enabled: !0,
                    onlyInViewport: !0
                },
                mousewheel: {
                    forceToAxis: !0
                }
            });
        i.on("slideChangeTransitionStart", function() {
            0 === i.activeIndex ? t.classList.remove("is-hero-arrow-enabled") : t.classList.add("is-hero-arrow-enabled"), i.activeIndex === i.slides.length - 1 ? e.classList.remove("is-hero-arrow-enabled") : e.classList.add("is-hero-arrow-enabled"), document.getElementsByClassName("js-hero-slideshow-number-current")[0].innerHTML = i.activeIndex + 1, n.style.width = 100 * (i.activeIndex + 1) / i.slides.length + "%"
        }), e.onclick = function() {
            i.activeIndex + 1 < i.slides.length && i.slideNext()
        }, t.onclick = function() {
            1 < i.activeIndex + 1 && i.slidePrev()
        }
    }), 0 < document.getElementsByClassName("js-hero-carousel").length && (e.appendChild(b), b.onload = function() {
        new Swiper(".js-hero-carousel", {
            slidesPerView: "auto",
            centeredSlides: !0,
            speed: 500,
            spaceBetween: 30,
            touchRatio: .8,
            loop: !0,
            grabCursor: !0,
            keyboard: {
                enabled: !0,
                onlyInViewport: !0
            },
            breakpoints: {
                992: {
                    spaceBetween: 15
                }
            },
            slideActiveClass: "is-hero-slide-active",
            slideDuplicateActiveClass: "is-hero-slide-active",
            mousewheel: {
                forceToAxis: !0
            },
            slideToClickedSlide: !0,
            pagination: {
                el: ".swiper-pagination",
                type: "bullets",
                clickable: !0
            },
            on: {
                init: function() {
                    document.getElementsByClassName("js-hero-carousel")[0].classList.remove("is-transparent")
                }
            }
        })
    });
    var w = null,
        C = document.getElementsByClassName("js-has-pagination");
    [].forEach.call(C, function(a) {
        function e() {
            var e, t, n, i, o, s = Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
                r = s < 768;
            null !== w && r == w < 768 || (r ? (e = parseInt(l.getAttribute("data-pages-mobile")), t = parseInt(l.getAttribute("data-pagination-labels-max")), l.innerHTML = function(e, t) {
                for (var n = Boolean(t < e), i = '<li class="page-item disabled"><a class="page-link page-link--arrow page-link--arrow-previous js-page-previous"></a></li><li class="page-item"><a class="page-link js-page js-page-1 is-current">1</a></li><li class="page-item page-item--filler"><a class="page-link js-page-filler is-hidden">â€¦</a></li>', o = 2; o <= e; o++) i += '<li class="page-item"><a class="page-link js-page js-page-' + o + " o-pagination__page", n && t - 1 <= o && (i += " is-hidden"), i += '">', i += o, i += "</a></li>";
                return i += '<li class="page-item page-item--filler"><a class="page-link js-page-filler', n || (i += " is-hidden"), i += '">â€¦</a></li><li class="page-item"><a class="page-link js-page js-page-' + (e + 1) + ' o-pagination__page">' + (e + 1) + "</a></li>", i += '<li class="page-item"><a class="page-link page-link--arrow page-link--arrow-next js-page-next"></a></li>'
            }(e, t)) : l.innerHTML = c, n = a.getElementsByClassName("js-pagination-container")[0], i = a.getElementsByClassName("js-pagination-control-area")[0], o = a.getElementsByClassName("js-pagination-target"), n && i && o && o.length && E(n, o, r, i)), w = s
        }
        var t, l = a.getElementsByClassName("js-pagination")[0],
            c = l.innerHTML;
        e(), window.onresize = function() {
            clearTimeout(t), t = setTimeout(function() {
                e()
            }, 500)
        }
    });
    var T, S, N, D, I, A, L = document.getElementsByClassName("js-open-video-modal");
    0 < L.length && [].forEach.call(L, function(e) {
        e.onclick = function(e) {
            var t, n, i, o, s, r, a;
            e.preventDefault(), t = this, n = document.getElementsByClassName("js-video-modal")[0], i = document.getElementsByClassName("js-video-modal-body")[0], o = t.getAttribute("data-modal-youtube-id"), s = t.getAttribute("data-modal-video-url"), r = t.getAttribute("data-modal-video-aspect-ratio"), a = "", r && "" !== r ? "4:3" === r ? n.classList.add("video-modal--4-3") : "16:10" === r ? n.classList.add("video-modal--16-10") : n.classList.add("video-modal--16-9") : n.classList.add("video-modal--16-9"), null !== o && o.length ? a = '<div class="video-modal__video-wrapper"><iframe width="100%" height="100%" src="https://www.youtube.com/embed/' + o + '" frameborder="0" allowfullscreen></iframe></div>' : null !== s && s.length && (a = '<div class="video-modal__video-wrapper"><video width="auto" height="100%" controls autoplay> <source src="' + s + '" type="video/mp4"></video></div>'), i.innerHTML = a
        }
    }), (!t() || 11 <= t()) && (T = new MutationObserver(function(e) {
        e.forEach(function(e) {
            !e.target.classList.contains("show") && document.body.classList.contains("modal-open") && (document.getElementsByClassName("js-video-modal-body")[0].innerHTML = "")
        })
    }), (S = document.getElementsByClassName("js-video-modal")[0]) && T.observe(S, {
        attributes: !0,
        attributeOldValue: !0,
        attributeFilter: ["class"]
    })), 0 < document.getElementsByClassName("js-instagram-images").length && (!t() || 11 < t()) && ((N = document.createElement("script")).type = "text/javascript", N.src = "https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js", e.appendChild(N), D = document.getElementsByClassName("js-instagram-images")[0], I = D.hasAttribute("data-instagram-user-name") ? D.getAttribute("data-instagram-user-name") : null, A = D.hasAttribute("data-instagram-limit") ? D.getAttribute("data-instagram-limit") : 0, N.onload = function() {
        function s() {
            var e = document.getElementsByClassName("js-instagram-image-container");
            [].forEach.call(e, function(e) {
                e.classList.contains("u-height-square") && e.classList.remove("u-height-square")
            });
            var t = document.getElementsByClassName("js-instagram-image");
            [].forEach.call(t, function(e) {
                e.classList.contains("u-height-square__content") && e.classList.remove("u-height-square__content")
            })
        }

        function r(e) {
            new Masonry(".js-instagram-images", {
                itemSelector: ".js-instagram-image-container",
                columnWidth: 0,
                horizontalOrder: !0,
                resize: !0
            });
            e && e()
        }
        I && D && (new InstagramFeed({
            username: I,
            container: D,
            get_data: !0,
            callback: function(e) {
                e && function(e, t) {
                    var n = e.edge_owner_to_timeline_media.edges,
                        i = "",
                        o = t < n.length ? t : n.length;
                    if (n)
                        for (l = 0; l < o; l++) i += '<li class="js-instagram-image-container instagram__image-container u-height-square">', i += '<a class="instagram__image-link" href="https://www.instagram.com/p/' + n[l].node.shortcode + '" target="_blank"><img class="js-instagram-image instagram__image u-height-square__content" src="' + n[l].node.thumbnail_src + '"></a>', i += "</li>";
                    D.className += " is-instagram-loaded", D.innerHTML = i, r(s)
                }(e, A)
            }
        }), r())
    }), document.getElementsByClassName("js-menu-toggle")[0].onclick = function() {
        document.body.classList.contains("is-menu-open") ? (document.body.classList.remove("u-no-scroll"), document.body.classList.remove("is-menu-open"), setTimeout(function() {
            document.getElementsByClassName("js-mobile-menu")[0].classList.remove("delay-transition")
        }, 500)) : (document.body.classList.add("u-no-scroll"), document.body.classList.add("is-menu-open"), setTimeout(function() {
            document.getElementsByClassName("js-mobile-menu")[0].classList.add("delay-transition")
        }, 500))
    };
    var O, k = document.getElementsByClassName("js-navbar");
    [].forEach.call(k, function(t) {
        var n = t.getElementsByClassName("js-search-open")[0];
        n.onclick = function() {
            t.classList.contains("is-search-open") || t.classList.add("is-search-open")
        }, document.addEventListener("click", function(e) {
            !n.contains(e.target) && t.classList.contains("is-search-open") && t.classList.remove("is-search-open")
        })
    }), 0 < (O = document.querySelectorAll("img.js-inline-svg")).length && [].forEach.call(O, function(n) {
        var i = new XMLHttpRequest;
        i.open("GET", n.src, !1), i.onreadystatechange = function() {
            var e, t;
            4 === i.readyState && (200 !== i.status && 0 !== i.status || (e = i.responseText, t = (new DOMParser).parseFromString(e, "image/svg+xml").querySelector("svg"), n.id && (t.id = n.id), n.className && (t.classList = n.classList), n.parentNode.replaceChild(t, n)))
        }, i.send(null)
    });
    var j = document.getElementsByClassName("js-collapsable-block");
    0 < j.length && [].forEach.call(j, function(e) {
        250 < e.clientHeight && function(e) {
            e.classList.add("collapsable", "is-collapsed");
            var t = document.createElement("div");
            t.classList.add("expand-trigger", "js-expand-block"), e.appendChild(t)
        }(e)
    });
    var x = document.getElementsByClassName("js-expand-block");
    0 < x.length && [].forEach.call(x, function(i) {
        i.onclick = function() {
            var e, t, n = i.parentNode;
            n.classList.contains("is-collapsed") ? ((t = n).classList.remove("is-collapsed"), t.classList.add("is-expanded")) : ((e = n).classList.remove("is-expanded"), e.classList.add("is-collapsed"))
        }
    }), t() && t() < 18 && document.addEventListener("DOMContentLoaded", function() {
        Array.prototype.forEach.call(document.querySelectorAll(".js-cover-image"), function(e) {
            e.style.background = 'url("' + e.src + '") no-repeat 50%/cover', e.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='" + e.width + "' height='" + e.height + "'%3E%3C/svg%3E"
        })
    })
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,